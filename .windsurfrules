# Coding Guidelines

## General
- My project's programming language is Python 3.11.
- Use early returns when possible to improve readability.
- Document all functions and classes with docstrings following PEP 257.
- Use flake8 for linting Python code.
- When planning a complex code change, always start with a plan of action and then ask me for approval on that plan.
- For simple changes, just make the code change but always think carefully and step-by-step about the change itself.
- When a file becomes too long, split it into smaller files.
- When a function becomes too long, split it into smaller functions.
- When debugging a problem, make sure you have sufficient information to deeply understand the problem. More often than not, opt in to adding more logging and tracing to the code to help you understand the problem before making any changes. If you are provided logs that make the source of the problem obvious, then implement a solution. If you're still not 100% confident about the source of the problem, then reflect on 4-6 different possible sources of the problem, distill those down to 1-2 most likely sources, and then implement a solution for the most likely source - either adding more logging to validate your theory or implement the actual fix if you're extremely confident about the source of the problem.

## Django
- My project is a Django 4.2.11 application.
- Follow Django’s MTV (Model-Template-View) architecture strictly.
- Use Django migrations for all schema changes. Do not alter the database schema manually.
- Follow Django’s security best practices (e.g., protect against SQL injection, use settings.SECRET_KEY).
- Optimize database queries with select_related and prefetch_related for foreign key lookups.

## Database
- My project uses TimescaleDB for time-series data.
- Use TimescaleDB hypertables for time-series data tables like environmental_reading.
- Always define hypertables with create_hypertable after table creation.
- Adhere to the proposed data model defined in \docs\data model.md unless it conflicts with the database schema or proves insufficient. In that case always suggest a plan for implementing scema changes before implementing changes
- The database connection string is defined in \aquamind\settings.py
- Use database_inspection_rule.md for database inspection
- When in doubt run the database inspection script to check the database schema

## Frontend
- Use Vue.js 3 for the frontend unless a specific feature requires another framework (e.g., React for complex state management).

## Quality & Safety
- Write unit tests for all new functions and classes using Django’s testing framework.
- Implement try-except blocks for database operations and API calls.
- Commit changes to Git with clear, descriptive messages. Do not commit incomplete or broken code.
- Adhere to the "AquaMind Testing Strategy" document in /docs

# Implementation Progress Tracking Rule

When we complete any milestone defined in the "implementation plan and progress.md" document:

1. Update the implementation plan document by:
   - Marking the completed milestone as "[x]" in the relevant phase
   - Adding an entry under the "Completed Milestones" section that includes:
     * The date of completion
     * A brief description of what was implemented
     * How it was implemented (key technologies, approaches, or decisions)

2. This update should follow these guidelines:
   - Include an ISO format timestamp (YYYY-MM-DD)
   - Be specific about which milestone was completed
   - Document any notable implementation details or challenges overcome
   - Note any deviations from the original plan and their justification

3. Always maintain the chronological order of milestone completions in the progress section

This rule ensures we maintain a clear record of our development progress and helps with project tracking and accountability.