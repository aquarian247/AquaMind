# Coding Guidelines

## General
- My project's programming language is Python 3.11.
- Use early returns when possible to improve readability.
- Document all functions and classes with docstrings following PEP 257.
- Use flake8 for linting Python code.
- When planning a complex code change, always start with a plan of action and then ask me for approval on that plan.
- For simple changes, just make the code change but always think carefully and step-by-step about the change itself.
- When a file becomes too long, split it into smaller files.
- When a function becomes too long, split it into smaller functions.
- When debugging a problem, make sure you have sufficient information to deeply understand the problem. More often than not, opt in to adding more logging and tracing to the code to help you understand the problem before making any changes. If you are provided logs that make the source of the problem obvious, then implement a solution. If you're still not 100% confident about the source of the problem, then reflect on 4-6 different possible sources of the problem, distill those down to 1-2 most likely sources, and then implement a solution for the most likely source - either adding more logging to validate your theory or implement the actual fix if you're extremely confident about the source of the problem.
- After making changes, ALWAYS make sure to start up a new server so I can test it.
- Always look for existing code to iterate on instead of creating new code.
- Do not drastically change the patterns before trying to iterate on existing patterns.
- Always kill all existing related servers that may have been created in previous testing before trying to start a new server.
- Always prefer simple solutions
- Avoid duplication of code whenever possible, which means checking for other areas of the codebase that might already have similar code and functionality
- Write code that takes into account the different environments: dev, test, and prod
- You are careful to only make changes that are requested or you are confident are well understood and related to the change being requested
- When fixing an issue or bug, do not introduce a new pattern or technology without first exhausting all options for the existing implementation. And if you finally do this, make sure to remove the old implementation afterwards so we don't have duplicate logic.
- Keep the codebase very clean and organized
- Avoid writing scripts in files if possible, especially if the script is likely only to be run once
- Avoid having files over 200-300 lines of code. Consider refactoring at that point.
- Mocking data is only needed for tests, never mock data for dev or prod
- Never add stubbing or fake data patterns to code that affects the dev or prod environments
- Never overwrite my .env file without first asking and confirming
- Focus on the areas of code relevant to the task
- Do not touch code that is unrelated to the task
- Write thorough tests for all major functionality
- Avoid making major changes to the patterns and architecture of how a feature works, after it has shown to work well, unless explicitly instructed
- Always think about what other methods and areas of code might be affected by code changes

## Django
- My project is a Django 4.2.11 application.
- Follow Django’s MTV (Model-Template-View) architecture strictly.
- Use Django migrations for all schema changes. Do not alter the database schema manually.
- Follow Django’s security best practices (e.g., protect against SQL injection, use settings.SECRET_KEY).
- Optimize database queries with select_related and prefetch_related for foreign key lookups.

## Database
- My project uses TimescaleDB for time-series data.
- Use TimescaleDB hypertables for time-series data tables like environmental_reading.
- Always define hypertables with create_hypertable after table creation.
- Adhere to the proposed data model defined in \docs\data model.md unless it conflicts with the database schema or proves insufficient. In that case always suggest a plan for implementing scema changes before implementing changes
- The database connection string is defined in \aquamind\settings.py
- Use database_inspection_rule.md for database inspection
- When in doubt run the database inspection script to check the database schema

## Frontend
- TBD

## Quality & Safety
- Write unit tests for all new functions and classes using Django’s testing framework.
- Implement try-except blocks for database operations and API calls.
- Commit changes to Git with clear, descriptive messages. Do not commit incomplete or broken code.
- Adhere to the "AquaMind Testing Strategy" document in /docs

## API URL Testing
- For testing API endpoints, prefer using a URL helper function in test classes over direct reverse lookup to ensure consistency:
  ```python
  def get_api_url(app_name, endpoint, detail=False, **kwargs):
      """Helper function to construct URLs for API endpoints"""
      if detail:
          pk = kwargs.get('pk')
          return f'/api/v1/{app_name}/{endpoint}/{pk}/'
      return f'/api/v1/{app_name}/{endpoint}/'
- Ensure each app with API endpoints has:
- A router in app_name/api/routers.py that registers all viewsets
- A properly configured urls.py with app_name set correctly
- Its URL patterns included in the main API router at aquamind/api/router.py
- When implementing a new module's tests, check existing API test patterns in the infrastructure module for reference
- Validate URL patterns in isolation before implementing complex test logic to catch routing issues early
- For serializers that update calculated fields (like biomass_kg from population_count), ensure the update logic is correctly applied in both PUT and PATCH operations
- Use the same URL naming and structure patterns across all modules for consistency

# Implementation Progress Tracking Rule

When we complete any milestone defined in the "implementation plan and progress.md" document:

1. Update the implementation plan document by:
   - Marking the completed milestone as "[x]" in the relevant phase
   - Adding an entry under the "Completed Milestones" section that includes:
     * The date of completion
     * A brief description of what was implemented
     * How it was implemented (key technologies, approaches, or decisions)

2. This update should follow these guidelines:
   - Include an ISO format timestamp (YYYY-MM-DD)
   - Be specific about which milestone was completed
   - Document any notable implementation details or challenges overcome
   - Note any deviations from the original plan and their justification

3. Always maintain the chronological order of milestone completions in the progress section

This rule ensures we maintain a clear record of our development progress and helps with project tracking and accountability.