name: AquaMind CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run migrations
      run: |
        python manage.py migrate --settings=aquamind.settings_ci
    
    - name: Run tests
      run: |
        # Only run tests for implemented features
        # As we complete more features from the implementation plan, we'll add their tests here
        python manage.py test --settings=aquamind.settings_ci --noinput
    
    - name: Generate test coverage report
      run: |
        pip install coverage
        # Only generate coverage for implemented features
        coverage run --source='.' manage.py test --settings=aquamind.settings_ci --noinput
        # Increasing coverage requirement as we implement more features
        coverage report --fail-under=40
      # Environment variables for PostgreSQL removed as CI now uses SQLite

    # ------------------------------------------------------------------
    # Cross-repo API Contract Synchronisation
    # ------------------------------------------------------------------
    - name: Generate OpenAPI spec
      run: |
        # drf-spectacular generates unified OpenAPI 3.1 schema
        python manage.py spectacular --file api/openapi.yaml

    - name: Upload OpenAPI spec artifact (api-spec)
      # This artifact is consumed by the front-end workflow that regenerates
      # the TypeScript client, ensuring both repos stay in sync.
      uses: actions/upload-artifact@v4
      with:
        name: api-spec
        path: api/openapi.yaml
        if-no-files-found: error

  deploy-staging:
    needs: test
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add actual deployment commands here
        # This is a placeholder for your deployment process
      # Will add environment variables when actual deployment is implemented
      # env:
      #   DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
  
  deploy-production:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add actual deployment commands here
        # This is a placeholder for your deployment process
      # Will add environment variables when actual deployment is implemented
      # env:
      #   DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
