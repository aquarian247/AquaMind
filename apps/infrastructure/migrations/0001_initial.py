# Generated by Django 4.2.11 on 2025-03-12 10:31

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Area",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "latitude",
                    models.DecimalField(
                        decimal_places=6,
                        max_digits=9,
                        validators=[
                            django.core.validators.MinValueValidator(-90),
                            django.core.validators.MaxValueValidator(90),
                        ],
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        decimal_places=6,
                        max_digits=9,
                        validators=[
                            django.core.validators.MinValueValidator(-180),
                            django.core.validators.MaxValueValidator(180),
                        ],
                    ),
                ),
                ("max_biomass", models.DecimalField(decimal_places=2, max_digits=12)),
                ("active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Container",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "volume_m3",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Actual volume in cubic meters",
                        max_digits=10,
                    ),
                ),
                (
                    "max_biomass_kg",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Maximum biomass in kg",
                        max_digits=10,
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "area",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="containers",
                        to="infrastructure.area",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ContainerType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("TANK", "Tank"),
                            ("PEN", "Pen"),
                            ("TRAY", "Tray"),
                            ("OTHER", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("max_volume_m3", models.DecimalField(decimal_places=2, max_digits=10)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="FreshwaterStation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "station_type",
                    models.CharField(
                        choices=[
                            ("FRESHWATER", "Freshwater"),
                            ("BROODSTOCK", "Broodstock"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        decimal_places=6,
                        max_digits=9,
                        validators=[
                            django.core.validators.MinValueValidator(-90),
                            django.core.validators.MaxValueValidator(90),
                        ],
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        decimal_places=6,
                        max_digits=9,
                        validators=[
                            django.core.validators.MinValueValidator(-180),
                            django.core.validators.MaxValueValidator(180),
                        ],
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Geography",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name_plural": "Geographies",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Sensor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "sensor_type",
                    models.CharField(
                        choices=[
                            ("TEMPERATURE", "Temperature"),
                            ("OXYGEN", "Oxygen"),
                            ("PH", "pH"),
                            ("SALINITY", "Salinity"),
                            ("CO2", "CO2"),
                            ("OTHER", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("serial_number", models.CharField(blank=True, max_length=100)),
                ("manufacturer", models.CharField(blank=True, max_length=100)),
                ("installation_date", models.DateField(blank=True, null=True)),
                ("last_calibration_date", models.DateField(blank=True, null=True)),
                ("active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "container",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sensors",
                        to="infrastructure.container",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Hall",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                (
                    "area_sqm",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "freshwater_station",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="halls",
                        to="infrastructure.freshwaterstation",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="freshwaterstation",
            name="geography",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="stations",
                to="infrastructure.geography",
            ),
        ),
        migrations.CreateModel(
            name="FeedContainer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "container_type",
                    models.CharField(
                        choices=[
                            ("SILO", "Silo"),
                            ("BARGE", "Barge"),
                            ("TANK", "Tank"),
                            ("OTHER", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "capacity_kg",
                    models.DecimalField(
                        decimal_places=2, help_text="Capacity in kg", max_digits=10
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "area",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feed_containers",
                        to="infrastructure.area",
                    ),
                ),
                (
                    "hall",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feed_containers",
                        to="infrastructure.hall",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="container",
            name="container_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="infrastructure.containertype",
            ),
        ),
        migrations.AddField(
            model_name="container",
            name="hall",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="containers",
                to="infrastructure.hall",
            ),
        ),
        migrations.AddField(
            model_name="area",
            name="geography",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="areas",
                to="infrastructure.geography",
            ),
        ),
        migrations.AddConstraint(
            model_name="feedcontainer",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("area__isnull", True), ("hall__isnull", False)),
                    models.Q(("area__isnull", False), ("hall__isnull", True)),
                    _connector="OR",
                ),
                name="feed_container_in_either_hall_or_area",
            ),
        ),
        migrations.AddConstraint(
            model_name="container",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("area__isnull", True), ("hall__isnull", False)),
                    models.Q(("area__isnull", False), ("hall__isnull", True)),
                    _connector="OR",
                ),
                name="container_in_either_hall_or_area",
            ),
        ),
    ]
