# Generated by Django 4.2.11 on 2025-03-31.
# This migration correctly enables TimescaleDB hypertables for key environmental tables.
from django.db import migrations

# SQL to create hypertable for environmental_reading
# Partitioning by reading_time (time) and sensor_id (space)
# Adjusted number_partitions based on expected sensor count (~800-1600)
CREATE_READING_HYPERTABLE = """
SELECT create_hypertable(
    'environmental_environmentalreading',
    'reading_time',
    partitioning_column => 'sensor_id',
    number_partitions => 16,
    chunk_time_interval => INTERVAL '7 days', -- Keep adjustable based on data volume
    if_not_exists => TRUE
);
"""

# SQL to create hypertable for environmental_weatherdata
# Partitioning by timestamp (time) and area_id (space)
# Adjusted number_partitions based on expected area count (~50)
CREATE_WEATHERDATA_HYPERTABLE = """
SELECT create_hypertable(
    'environmental_weatherdata',
    'timestamp',
    partitioning_column => 'area_id',
    number_partitions => 16,
    chunk_time_interval => INTERVAL '1 month', -- Keep adjustable based on data volume
    if_not_exists => TRUE
);
"""

# Reverse SQL is complex for hypertables; using placeholders to allow reversal in Django
REVERSE_SQL = """
-- NOTE: Reversing this migration does not automatically drop the hypertables.
-- Dropping hypertables requires manual intervention using TimescaleDB functions
-- (e.g., drop_hypertable) and should be done with caution.
SELECT 1; -- Placeholder SQL
"""

class Migration(migrations.Migration):

    dependencies = [
        # Depend on the LAST known migration in the app before this one
        ('environmental', '0005_fix_timescaledb_integration'),
    ]

    operations = [
        migrations.RunSQL(
            sql=CREATE_READING_HYPERTABLE,
            reverse_sql=REVERSE_SQL,
            # State that this operation is TimescaleDB specific, though RunSQL implies DB-specific execution
            # hint='Creates TimescaleDB hypertable for environmental readings'
        ),
        migrations.RunSQL(
            sql=CREATE_WEATHERDATA_HYPERTABLE,
            reverse_sql=REVERSE_SQL,
            # hint='Creates TimescaleDB hypertable for weather data'
        ),
        # NOTE: Compression and retention policies can be added in subsequent migrations
        # using similar RunSQL operations with appropriate TimescaleDB functions (e.g., add_compression_policy).
    ]
