# Generated by Django 4.2.11 on 2025-04-01.
# This migration fixes SQLite compatibility issues with TimescaleDB migrations.
from django.db import migrations
from django.conf import settings
from django.db import connection
import logging

logger = logging.getLogger(__name__)

def run_if_postgresql(apps, schema_editor):
    """
    Run TimescaleDB operations only if using PostgreSQL.
    This function handles the setup of TimescaleDB hypertables for environmental tables,
    but only if the database is PostgreSQL. It will be skipped for SQLite and other databases.
    """
    if connection.vendor != 'postgresql':
        print("Skipping PK update: Not PostgreSQL")
        return
    
    # Check if TimescaleDB is available
    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT extname FROM pg_extension WHERE extname = 'timescaledb';")
            timescaledb_available = cursor.fetchone() is not None
    except Exception:
        timescaledb_available = False
    
    if not timescaledb_available:
        print("[WARNING] Skipping PK update: TimescaleDB not available or disabled")
        return
    
    # SQL to drop the default primary key constraint if it exists
    drop_pk_sql = '''
    DO $$
    BEGIN
        IF EXISTS (SELECT 1 FROM information_schema.table_constraints 
                WHERE constraint_name = '{table_name}_pkey' 
                AND table_name = '{table_name}' 
                AND table_schema = 'public') THEN
            EXECUTE 'ALTER TABLE public.{table_name} DROP CONSTRAINT {table_name}_pkey;';
            RAISE NOTICE 'Dropped default PK constraint for {table_name}';
        END IF;
    END $$;
    '''
    
    # SQL to set the composite primary key
    set_pk_sql = '''
    ALTER TABLE public.{table_name} ADD PRIMARY KEY ({pk_columns});
    '''
    
    # SQL to create the hypertable with space partitioning
    create_hypertable_sql = '''
    SELECT create_hypertable(
        '{table_name}', 
        '{time_column}', 
        partitioning_column => '{partition_column}', 
        number_partitions => {num_partitions},
        chunk_time_interval => INTERVAL '{chunk_interval}',
        if_not_exists => TRUE
    );
    '''
    
    # Process environmental_environmentalreading table
    with connection.cursor() as cursor:
        # 1. Drop default PK if it exists
        cursor.execute(drop_pk_sql.format(table_name='environmental_environmentalreading'))
        print("[OK] Dropped default PK constraint for environmental_environmentalreading (if it existed)")
        
        # 2. Set composite PK
        cursor.execute(set_pk_sql.format(
            table_name='environmental_environmentalreading', 
            pk_columns='reading_time, sensor_id'
        ))
        print("[OK] Set composite primary key for environmental_environmentalreading")
        
        # 3. Create hypertable
        cursor.execute(create_hypertable_sql.format(
            table_name='environmental_environmentalreading',
            time_column='reading_time',
            partition_column='sensor_id',
            num_partitions=16,
            chunk_interval='7 days'
        ))
        print("[OK] Created hypertable for environmental_environmentalreading")
    
    # Process environmental_weatherdata table
    with connection.cursor() as cursor:
        # 1. Drop default PK if it exists
        cursor.execute(drop_pk_sql.format(table_name='environmental_weatherdata'))
        print("[OK] Dropped default PK constraint for environmental_weatherdata (if it existed)")
        
        # 2. Set composite PK
        cursor.execute(set_pk_sql.format(
            table_name='environmental_weatherdata', 
            pk_columns='timestamp, area_id'
        ))
        print("[OK] Set composite primary key for environmental_weatherdata")
        
        # 3. Create hypertable
        cursor.execute(create_hypertable_sql.format(
            table_name='environmental_weatherdata',
            time_column='timestamp',
            partition_column='area_id',
            num_partitions=16,
            chunk_interval='1 month'
        ))
        print("[OK] Created hypertable for environmental_weatherdata")


class Migration(migrations.Migration):

    dependencies = [
        ('environmental', '0006_correctly_enable_hypertables'),
    ]

    operations = [
        migrations.RunPython(
            run_if_postgresql,
            reverse_code=migrations.RunPython.noop
        ),
    ]
