# Generated by Django 4.2.11 on 2025-09-02 12:01

from django.db import migrations
from django.db.models import Q


def populate_batch_container_assignment(apps, schema_editor):
    """
    Populate the batch_container_assignment field for existing EnvironmentalReading records.

    For each reading with a batch and container, find the active assignment at the reading time.
    """
    EnvironmentalReading = apps.get_model('environmental', 'EnvironmentalReading')
    BatchContainerAssignment = apps.get_model('batch', 'BatchContainerAssignment')

    # Process readings in batches to avoid memory issues
    batch_size = 1000
    total_processed = 0

    # Get readings that have both batch and container but no assignment yet
    readings_to_process = EnvironmentalReading.objects.filter(
        batch__isnull=False,
        container__isnull=False,
        batch_container_assignment__isnull=True
    )

    print(f"Processing {readings_to_process.count()} environmental readings...")

    for i in range(0, readings_to_process.count(), batch_size):
        batch_readings = readings_to_process[i:i + batch_size]

        for reading in batch_readings:
            # Find the active assignment for this batch and container at the reading time
            assignment = BatchContainerAssignment.objects.filter(
                batch=reading.batch,
                container=reading.container,
                assignment_date__lte=reading.reading_time.date(),
                is_active=True
            ).filter(
                # Assignment should not have ended before reading time, or not ended at all
                Q(departure_date__isnull=True) | Q(departure_date__gte=reading.reading_time.date())
            ).first()

            if assignment:
                reading.batch_container_assignment = assignment
                reading.save(update_fields=['batch_container_assignment'])
                total_processed += 1
            else:
                print(f"Warning: No active assignment found for reading {reading.id} "
                      f"(batch: {reading.batch_id}, container: {reading.container_id}, "
                      f"time: {reading.reading_time})")

        print(f"Processed {total_processed} readings so far...")

    print(f"Data migration complete. Updated {total_processed} environmental readings.")


def reverse_populate_batch_container_assignment(apps, schema_editor):
    """
    Reverse migration: Clear the batch_container_assignment field.
    """
    EnvironmentalReading = apps.get_model('environmental', 'EnvironmentalReading')

    EnvironmentalReading.objects.filter(
        batch_container_assignment__isnull=False
    ).update(batch_container_assignment=None)

    print("Reverse migration complete: Cleared batch_container_assignment fields.")


class Migration(migrations.Migration):

    dependencies = [
        ("environmental", "0009_add_batch_container_assignment_fk"),
    ]

    operations = [
        migrations.RunPython(
            populate_batch_container_assignment,
            reverse_code=reverse_populate_batch_container_assignment
        ),
    ]
