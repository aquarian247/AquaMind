# Generated by Django 4.2.11 on 2025-10-30 14:45

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("health", "0021_populate_lice_types"),
    ]

    operations = [
        migrations.AlterModelOptions(
            name="healthparameter",
            options={
                "ordering": ["name"],
                "verbose_name": "Health Parameter",
                "verbose_name_plural": "Health Parameters",
            },
        ),
        migrations.AlterModelOptions(
            name="historicalhealthparameter",
            options={
                "get_latest_by": ("history_date", "history_id"),
                "ordering": ("-history_date", "-history_id"),
                "verbose_name": "historical Health Parameter",
                "verbose_name_plural": "historical Health Parameters",
            },
        ),
        migrations.AddField(
            model_name="healthparameter",
            name="description",
            field=models.TextField(
                blank=True, help_text="General description of this health parameter"
            ),
        ),
        migrations.AddField(
            model_name="healthparameter",
            name="max_score",
            field=models.IntegerField(
                default=3, help_text="Maximum score value (inclusive)"
            ),
        ),
        migrations.AddField(
            model_name="healthparameter",
            name="min_score",
            field=models.IntegerField(
                default=0, help_text="Minimum score value (inclusive)"
            ),
        ),
        migrations.AddField(
            model_name="historicalhealthparameter",
            name="description",
            field=models.TextField(
                blank=True, help_text="General description of this health parameter"
            ),
        ),
        migrations.AddField(
            model_name="historicalhealthparameter",
            name="max_score",
            field=models.IntegerField(
                default=3, help_text="Maximum score value (inclusive)"
            ),
        ),
        migrations.AddField(
            model_name="historicalhealthparameter",
            name="min_score",
            field=models.IntegerField(
                default=0, help_text="Minimum score value (inclusive)"
            ),
        ),
        migrations.AlterField(
            model_name="fishparameterscore",
            name="parameter",
            field=models.ForeignKey(
                help_text="The health parameter being scored.",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="fish_scores",
                to="health.healthparameter",
            ),
        ),
        migrations.AlterField(
            model_name="fishparameterscore",
            name="score",
            field=models.SmallIntegerField(
                help_text="Score value - range defined by parameter's min_score/max_score"
            ),
        ),
        migrations.AlterField(
            model_name="healthparameter",
            name="name",
            field=models.CharField(
                help_text="Name of the health parameter (e.g., Gill Condition).",
                max_length=100,
                unique=True,
            ),
        ),
        migrations.AlterField(
            model_name="historicalhealthparameter",
            name="name",
            field=models.CharField(
                db_index=True,
                help_text="Name of the health parameter (e.g., Gill Condition).",
                max_length=100,
            ),
        ),
        migrations.AlterField(
            model_name="historicallicecount",
            name="adult_female_count",
            field=models.PositiveIntegerField(
                default=0,
                help_text="[LEGACY] Adult female lice counted. Use lice_type_counts for new data.",
            ),
        ),
        migrations.AlterField(
            model_name="historicallicecount",
            name="adult_male_count",
            field=models.PositiveIntegerField(
                default=0,
                help_text="[LEGACY] Adult male lice counted. Use lice_type_counts for new data.",
            ),
        ),
        migrations.AlterField(
            model_name="historicallicecount",
            name="confidence_level",
            field=models.DecimalField(
                blank=True,
                decimal_places=2,
                help_text="Confidence level (0.00-1.00), where 1.00 is highest confidence.",
                max_digits=3,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="historicallicecount",
            name="count_value",
            field=models.PositiveIntegerField(
                blank=True,
                help_text="Count for lice type. Use with lice_type field.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="historicallicecount",
            name="juvenile_count",
            field=models.PositiveIntegerField(
                default=0,
                help_text="[LEGACY] Juvenile lice counted. Use lice_type_counts for new data.",
            ),
        ),
        migrations.AlterField(
            model_name="historicallicetype",
            name="is_active",
            field=models.BooleanField(
                default=True, help_text="Whether this lice type is currently tracked."
            ),
        ),
        migrations.AlterField(
            model_name="licecount",
            name="adult_female_count",
            field=models.PositiveIntegerField(
                default=0,
                help_text="[LEGACY] Adult female lice counted. Use lice_type_counts for new data.",
            ),
        ),
        migrations.AlterField(
            model_name="licecount",
            name="adult_male_count",
            field=models.PositiveIntegerField(
                default=0,
                help_text="[LEGACY] Adult male lice counted. Use lice_type_counts for new data.",
            ),
        ),
        migrations.AlterField(
            model_name="licecount",
            name="confidence_level",
            field=models.DecimalField(
                blank=True,
                decimal_places=2,
                help_text="Confidence level (0.00-1.00), where 1.00 is highest confidence.",
                max_digits=3,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="licecount",
            name="count_value",
            field=models.PositiveIntegerField(
                blank=True,
                help_text="Count for lice type. Use with lice_type field.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="licecount",
            name="juvenile_count",
            field=models.PositiveIntegerField(
                default=0,
                help_text="[LEGACY] Juvenile lice counted. Use lice_type_counts for new data.",
            ),
        ),
        migrations.AlterField(
            model_name="licetype",
            name="is_active",
            field=models.BooleanField(
                default=True, help_text="Whether this lice type is currently tracked."
            ),
        ),
        migrations.CreateModel(
            name="HistoricalParameterScoreDefinition",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "score_value",
                    models.IntegerField(
                        help_text="The numeric score value (e.g., 0, 1, 2, 3)"
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="Short label for this score (e.g., 'Excellent', 'Good')",
                        max_length=50,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of what this score indicates"
                    ),
                ),
                (
                    "display_order",
                    models.IntegerField(
                        default=0, help_text="Order to display this score (for sorting)"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parameter",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="health.healthparameter",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Parameter Score Definition",
                "verbose_name_plural": "historical Parameter Score Definitions",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalFishParameterScore",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "score",
                    models.SmallIntegerField(
                        help_text="Score value - range defined by parameter's min_score/max_score"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "individual_fish_observation",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The individual fish observation this score belongs to.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="health.individualfishobservation",
                    ),
                ),
                (
                    "parameter",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The health parameter being scored.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="health.healthparameter",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Fish Parameter Score",
                "verbose_name_plural": "historical Fish Parameter Scores",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ParameterScoreDefinition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "score_value",
                    models.IntegerField(
                        help_text="The numeric score value (e.g., 0, 1, 2, 3)"
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="Short label for this score (e.g., 'Excellent', 'Good')",
                        max_length=50,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of what this score indicates"
                    ),
                ),
                (
                    "display_order",
                    models.IntegerField(
                        default=0, help_text="Order to display this score (for sorting)"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "parameter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="score_definitions",
                        to="health.healthparameter",
                    ),
                ),
            ],
            options={
                "verbose_name": "Parameter Score Definition",
                "verbose_name_plural": "Parameter Score Definitions",
                "ordering": ["parameter", "display_order", "score_value"],
                "unique_together": {("parameter", "score_value")},
            },
        ),
    ]
