# Generated by Django 4.2.11 on 2025-10-30 14:53

from django.db import migrations


def create_initial_parameters(apps, schema_editor):
    """Create the 9 standard health parameters if they don't already exist."""
    HealthParameter = apps.get_model('health', 'HealthParameter')
    
    # Skip if parameters already exist
    if HealthParameter.objects.exists():
        return
    
    # Parameters with legacy 1-5 descriptions (to be replaced by normalized scores)
    parameters = [
        {
            'name': 'Gill Condition',
            'description_score_1': 'Healthy gills, pink color',
            'description_score_2': 'Slight mucus buildup',
            'description_score_3': 'Moderate inflammation',
            'description_score_4': 'Severe inflammation',
            'description_score_5': 'Critical damage, necrosis',
        },
        {
            'name': 'Eye Condition',
            'description_score_1': 'Clear, bright eyes',
            'description_score_2': 'Slight cloudiness',
            'description_score_3': 'Moderate cloudiness',
            'description_score_4': 'Severe cloudiness/damage',
            'description_score_5': 'Blind or missing',
        },
        {
            'name': 'Wounds/Lesions',
            'description_score_1': 'No wounds',
            'description_score_2': 'Minor abrasions',
            'description_score_3': 'Moderate wounds',
            'description_score_4': 'Severe wounds/ulcers',
            'description_score_5': 'Extensive necrotic lesions',
        },
        {
            'name': 'Fin Condition',
            'description_score_1': 'Intact, healthy fins',
            'description_score_2': 'Minor fraying',
            'description_score_3': 'Moderate erosion',
            'description_score_4': 'Severe erosion',
            'description_score_5': 'Complete fin loss',
        },
        {
            'name': 'Body Condition',
            'description_score_1': 'Robust, well-formed',
            'description_score_2': 'Slight deformities',
            'description_score_3': 'Moderate deformities',
            'description_score_4': 'Severe deformities',
            'description_score_5': 'Critical malformation',
        },
        {
            'name': 'Swimming Behavior',
            'description_score_1': 'Active, normal swimming',
            'description_score_2': 'Slightly lethargic',
            'description_score_3': 'Moderately lethargic',
            'description_score_4': 'Severely impaired',
            'description_score_5': 'Unable to swim',
        },
        {
            'name': 'Appetite',
            'description_score_1': 'Excellent feeding response',
            'description_score_2': 'Good appetite',
            'description_score_3': 'Reduced appetite',
            'description_score_4': 'Poor appetite',
            'description_score_5': 'No feeding response',
        },
        {
            'name': 'Mucous Membrane',
            'description_score_1': 'Normal mucus layer',
            'description_score_2': 'Slight excess mucus',
            'description_score_3': 'Moderate excess mucus',
            'description_score_4': 'Heavy excess mucus',
            'description_score_5': 'Absent or damaged',
        },
        {
            'name': 'Color/Pigmentation',
            'description_score_1': 'Normal coloration',
            'description_score_2': 'Slight color changes',
            'description_score_3': 'Moderate discoloration',
            'description_score_4': 'Severe discoloration',
            'description_score_5': 'Extreme color abnormalities',
        },
    ]
    
    for param_data in parameters:
        HealthParameter.objects.create(**param_data)


def reverse_create_parameters(apps, schema_editor):
    """Remove the created parameters on migration reversal."""
    HealthParameter = apps.get_model('health', 'HealthParameter')
    parameter_names = [
        'Gill Condition', 'Eye Condition', 'Wounds/Lesions', 'Fin Condition',
        'Body Condition', 'Swimming Behavior', 'Appetite', 'Mucous Membrane',
        'Color/Pigmentation'
    ]
    HealthParameter.objects.filter(name__in=parameter_names).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("health", "0022_restructure_health_parameters"),
    ]

    operations = [
        migrations.RunPython(create_initial_parameters, reverse_create_parameters),
    ]
