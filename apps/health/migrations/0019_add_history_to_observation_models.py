# Generated by Django 4.2.11 on 2025-10-09 09:23

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("batch", "0021_add_history_to_observation_models"),
        ("health", "0018_historicaltreatment_historicalmortalityrecord_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="HistoricalIndividualFishObservation",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "fish_identifier",
                    models.CharField(
                        help_text="Identifier for the specific fish (e.g., tag number or sequential ID).",
                        max_length=50,
                    ),
                ),
                (
                    "weight_g",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Weight of the fish in grams.",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "length_cm",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Length of the fish in centimeters.",
                        max_digits=10,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "sampling_event",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The health sampling event this observation belongs to.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="health.healthsamplingevent",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Individual Fish Observation",
                "verbose_name_plural": "historical Individual Fish Observations",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalHealthSamplingEvent",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("sampling_date", models.DateField(default=django.utils.timezone.now)),
                (
                    "number_of_fish_sampled",
                    models.PositiveIntegerField(
                        help_text="Target or initially declared number of individual fish to be examined in this sampling event."
                    ),
                ),
                (
                    "avg_weight_g",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Average weight in grams of sampled fish.",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "std_dev_weight_g",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Standard deviation of weight in grams.",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "min_weight_g",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Minimum weight in grams among sampled fish.",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "max_weight_g",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Maximum weight in grams among sampled fish.",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "avg_length_cm",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Average length in centimeters of sampled fish.",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "std_dev_length_cm",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Standard deviation of length in centimeters.",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "min_length_cm",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Minimum length in centimeters among sampled fish.",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "max_length_cm",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Maximum length in centimeters among sampled fish.",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "avg_k_factor",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Average condition factor (K) of sampled fish.",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "calculated_sample_size",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Actual number of fish with measurements in this sample.",
                        null=True,
                    ),
                ),
                ("notes", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "assignment",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The specific batch and container assignment being sampled.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="batch.batchcontainerassignment",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "sampled_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="User who conducted the sampling.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Health Sampling Event",
                "verbose_name_plural": "historical Health Sampling Events",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalHealthParameter",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="Name of the health parameter (e.g., Gill Health).",
                        max_length=100,
                    ),
                ),
                (
                    "description_score_1",
                    models.TextField(
                        help_text="Description for score 1 (Best/Excellent)."
                    ),
                ),
                (
                    "description_score_2",
                    models.TextField(help_text="Description for score 2 (Good)."),
                ),
                (
                    "description_score_3",
                    models.TextField(
                        help_text="Description for score 3 (Fair/Moderate)."
                    ),
                ),
                (
                    "description_score_4",
                    models.TextField(
                        help_text="Description for score 4 (Poor/Severe)."
                    ),
                ),
                (
                    "description_score_5",
                    models.TextField(
                        default="",
                        help_text="Description for score 5 (Worst/Critical).",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Is this parameter currently in use?"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical health parameter",
                "verbose_name_plural": "historical health parameters",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
