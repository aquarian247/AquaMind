# Generated by Django 4.2.11 on 2025-06-17 13:02

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('scenario', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BiologicalConstraints',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Name for this constraint set (e.g., 'Bakkafrost Standard', 'Conservative')", max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of this constraint set')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this constraint set is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Biological Constraint Set',
                'verbose_name_plural': 'Biological Constraint Sets',
                'db_table': 'scenario_biological_constraints',
                'permissions': [('can_manage_biological_constraints', 'Can manage biological constraints')],
            },
        ),
        migrations.CreateModel(
            name='FCRModelStageOverride',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_weight_g', models.DecimalField(decimal_places=2, help_text='Minimum weight for this FCR value', max_digits=10)),
                ('max_weight_g', models.DecimalField(decimal_places=2, help_text='Maximum weight for this FCR value', max_digits=10)),
                ('fcr_value', models.DecimalField(decimal_places=3, help_text='FCR value for this weight range', max_digits=5)),
            ],
            options={
                'db_table': 'scenario_fcr_model_stage_override',
                'ordering': ['min_weight_g'],
            },
        ),
        migrations.CreateModel(
            name='MortalityModelStage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lifecycle_stage', models.CharField(choices=[('egg', 'Egg'), ('alevin', 'Alevin'), ('fry', 'Fry'), ('parr', 'Parr'), ('smolt', 'Smolt'), ('post_smolt', 'Post-Smolt'), ('harvest', 'Harvest')], max_length=20)),
                ('daily_rate_percent', models.DecimalField(decimal_places=3, help_text='Daily mortality rate as percentage for this stage', max_digits=5)),
                ('weekly_rate_percent', models.DecimalField(blank=True, decimal_places=3, help_text='Weekly mortality rate as percentage (calculated if not provided)', max_digits=5, null=True)),
            ],
            options={
                'db_table': 'scenario_mortality_model_stage',
            },
        ),
        migrations.CreateModel(
            name='StageConstraint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lifecycle_stage', models.CharField(choices=[('egg', 'Egg'), ('alevin', 'Alevin'), ('fry', 'Fry'), ('parr', 'Parr'), ('smolt', 'Smolt'), ('post_smolt', 'Post-Smolt'), ('harvest', 'Harvest')], max_length=20)),
                ('min_weight_g', models.DecimalField(decimal_places=2, help_text='Minimum weight for this stage in grams', max_digits=10)),
                ('max_weight_g', models.DecimalField(decimal_places=2, help_text='Maximum weight for this stage in grams', max_digits=10)),
                ('min_temperature_c', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum optimal temperature for this stage', max_digits=5, null=True)),
                ('max_temperature_c', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum optimal temperature for this stage', max_digits=5, null=True)),
                ('typical_duration_days', models.IntegerField(blank=True, help_text='Typical duration in this stage (days)', null=True)),
                ('max_freshwater_weight_g', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum weight allowed in freshwater for this stage', max_digits=10, null=True)),
            ],
            options={
                'db_table': 'scenario_stage_constraint',
            },
        ),
        migrations.CreateModel(
            name='TGCModelStage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lifecycle_stage', models.CharField(choices=[('egg', 'Egg'), ('alevin', 'Alevin'), ('fry', 'Fry'), ('parr', 'Parr'), ('smolt', 'Smolt'), ('post_smolt', 'Post-Smolt'), ('harvest', 'Harvest')], max_length=20)),
                ('tgc_value', models.DecimalField(decimal_places=4, help_text='TGC value for this specific stage', max_digits=6)),
                ('temperature_exponent', models.DecimalField(decimal_places=2, default=1.0, help_text='Temperature exponent (n) for this stage', max_digits=4)),
                ('weight_exponent', models.DecimalField(decimal_places=2, default=0.333, help_text='Weight exponent (m) for this stage', max_digits=4)),
            ],
            options={
                'db_table': 'scenario_tgc_model_stage',
            },
        ),
        migrations.AddIndex(
            model_name='scenario',
            index=models.Index(fields=['start_date'], name='scenario_start_d_75cb3d_idx'),
        ),
        migrations.AddIndex(
            model_name='scenario',
            index=models.Index(fields=['created_by'], name='scenario_created_277418_idx'),
        ),
        migrations.AlterModelTable(
            name='scenario',
            table='scenario',
        ),
        migrations.AddField(
            model_name='tgcmodelstage',
            name='tgc_model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stage_overrides', to='scenario.tgcmodel'),
        ),
        migrations.AddField(
            model_name='stageconstraint',
            name='constraint_set',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stage_constraints', to='scenario.biologicalconstraints'),
        ),
        migrations.AddField(
            model_name='mortalitymodelstage',
            name='mortality_model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stage_overrides', to='scenario.mortalitymodel'),
        ),
        migrations.AddField(
            model_name='fcrmodelstageoverride',
            name='fcr_stage',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='overrides', to='scenario.fcrmodelstage'),
        ),
        migrations.AddField(
            model_name='biologicalconstraints',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_constraints', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalscenario',
            name='biological_constraints',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='Biological constraints to use for validation', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='scenario.biologicalconstraints'),
        ),
        migrations.AddField(
            model_name='scenario',
            name='biological_constraints',
            field=models.ForeignKey(blank=True, help_text='Biological constraints to use for validation', null=True, on_delete=django.db.models.deletion.SET_NULL, to='scenario.biologicalconstraints'),
        ),
        migrations.AlterUniqueTogether(
            name='tgcmodelstage',
            unique_together={('tgc_model', 'lifecycle_stage')},
        ),
        migrations.AlterUniqueTogether(
            name='stageconstraint',
            unique_together={('constraint_set', 'lifecycle_stage')},
        ),
        migrations.AlterUniqueTogether(
            name='mortalitymodelstage',
            unique_together={('mortality_model', 'lifecycle_stage')},
        ),
    ]
