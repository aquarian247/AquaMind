# Generated by Django 4.2.11 on 2025-06-17 11:54

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('batch', '0016_historicalbatch'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FCRModel',
            fields=[
                ('model_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Model name (e.g., 'Standard FCR')", max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'FCR Model',
                'verbose_name_plural': 'FCR Models',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MortalityModel',
            fields=[
                ('model_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Model name (e.g., 'Low Mortality')", max_length=255, unique=True)),
                ('frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly')], help_text='Rate application frequency', max_length=10)),
                ('rate', models.FloatField(help_text='Mortality rate percentage (e.g., 0.1)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Mortality Model',
                'verbose_name_plural': 'Mortality Models',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Scenario',
            fields=[
                ('scenario_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Scenario name (e.g., 'Scotland April Sim')", max_length=255)),
                ('start_date', models.DateField(help_text='Simulation start date')),
                ('duration_days', models.IntegerField(help_text='Total simulation days (e.g., 900)', validators=[django.core.validators.MinValueValidator(1)])),
                ('initial_count', models.IntegerField(help_text='Initial fish count (e.g., 10000)', validators=[django.core.validators.MinValueValidator(1)])),
                ('genotype', models.CharField(help_text="Fish genotype (e.g., 'SalmoBreed')", max_length=255)),
                ('supplier', models.CharField(help_text="Fish supplier (e.g., 'AquaGen')", max_length=255)),
                ('initial_weight', models.FloatField(blank=True, help_text='Initial weight in grams (e.g., 50)', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('batch', models.ForeignKey(blank=True, help_text='Optional link to existing batch for real-data initialization', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scenarios', to='batch.batch')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_scenarios', to=settings.AUTH_USER_MODEL)),
                ('fcr_model', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='scenarios', to='scenario.fcrmodel')),
                ('mortality_model', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='scenarios', to='scenario.mortalitymodel')),
            ],
            options={
                'verbose_name': 'Scenario',
                'verbose_name_plural': 'Scenarios',
                'ordering': ['-created_at', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TemperatureProfile',
            fields=[
                ('profile_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Descriptive name (e.g., 'Faroe Islands Winter')", max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Temperature Profile',
                'verbose_name_plural': 'Temperature Profiles',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TGCModel',
            fields=[
                ('model_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Model name (e.g., 'Scotland April TGC')", max_length=255, unique=True)),
                ('location', models.CharField(help_text="Location (e.g., 'Scotland Site 1')", max_length=255)),
                ('release_period', models.CharField(help_text="Release timing (e.g., 'April')", max_length=255)),
                ('tgc_value', models.FloatField(help_text='TGC coefficient (e.g., 0.025)', validators=[django.core.validators.MinValueValidator(0)])),
                ('exponent_n', models.FloatField(default=0.33, help_text='Temperature exponent (e.g., 0.33)')),
                ('exponent_m', models.FloatField(default=0.66, help_text='Weight exponent (e.g., 0.66)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tgc_models', to='scenario.temperatureprofile')),
            ],
            options={
                'verbose_name': 'TGC Model',
                'verbose_name_plural': 'TGC Models',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ScenarioModelChange',
            fields=[
                ('change_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('change_day', models.IntegerField(help_text='Day of change (e.g., 180)', validators=[django.core.validators.MinValueValidator(0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('new_fcr_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='scenario_changes', to='scenario.fcrmodel')),
                ('new_mortality_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='scenario_changes', to='scenario.mortalitymodel')),
                ('new_tgc_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='scenario_changes', to='scenario.tgcmodel')),
                ('scenario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='model_changes', to='scenario.scenario')),
            ],
            options={
                'verbose_name': 'Scenario Model Change',
                'verbose_name_plural': 'Scenario Model Changes',
                'ordering': ['scenario', 'change_day'],
            },
        ),
        migrations.AddField(
            model_name='scenario',
            name='tgc_model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='scenarios', to='scenario.tgcmodel'),
        ),
        migrations.CreateModel(
            name='HistoricalTGCModel',
            fields=[
                ('model_id', models.BigIntegerField(blank=True, db_index=True)),
                ('name', models.CharField(db_index=True, help_text="Model name (e.g., 'Scotland April TGC')", max_length=255)),
                ('location', models.CharField(help_text="Location (e.g., 'Scotland Site 1')", max_length=255)),
                ('release_period', models.CharField(help_text="Release timing (e.g., 'April')", max_length=255)),
                ('tgc_value', models.FloatField(help_text='TGC coefficient (e.g., 0.025)', validators=[django.core.validators.MinValueValidator(0)])),
                ('exponent_n', models.FloatField(default=0.33, help_text='Temperature exponent (e.g., 0.33)')),
                ('exponent_m', models.FloatField(default=0.66, help_text='Weight exponent (e.g., 0.66)')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('profile', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='scenario.temperatureprofile')),
            ],
            options={
                'verbose_name': 'historical TGC Model',
                'verbose_name_plural': 'historical TGC Models',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalScenarioModelChange',
            fields=[
                ('change_id', models.BigIntegerField(blank=True, db_index=True)),
                ('change_day', models.IntegerField(help_text='Day of change (e.g., 180)', validators=[django.core.validators.MinValueValidator(0)])),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('new_fcr_model', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='scenario.fcrmodel')),
                ('new_mortality_model', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='scenario.mortalitymodel')),
                ('new_tgc_model', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='scenario.tgcmodel')),
                ('scenario', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='scenario.scenario')),
            ],
            options={
                'verbose_name': 'historical Scenario Model Change',
                'verbose_name_plural': 'historical Scenario Model Changes',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalScenario',
            fields=[
                ('scenario_id', models.BigIntegerField(blank=True, db_index=True)),
                ('name', models.CharField(help_text="Scenario name (e.g., 'Scotland April Sim')", max_length=255)),
                ('start_date', models.DateField(help_text='Simulation start date')),
                ('duration_days', models.IntegerField(help_text='Total simulation days (e.g., 900)', validators=[django.core.validators.MinValueValidator(1)])),
                ('initial_count', models.IntegerField(help_text='Initial fish count (e.g., 10000)', validators=[django.core.validators.MinValueValidator(1)])),
                ('genotype', models.CharField(help_text="Fish genotype (e.g., 'SalmoBreed')", max_length=255)),
                ('supplier', models.CharField(help_text="Fish supplier (e.g., 'AquaGen')", max_length=255)),
                ('initial_weight', models.FloatField(blank=True, help_text='Initial weight in grams (e.g., 50)', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('batch', models.ForeignKey(blank=True, db_constraint=False, help_text='Optional link to existing batch for real-data initialization', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='batch.batch')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('fcr_model', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='scenario.fcrmodel')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('mortality_model', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='scenario.mortalitymodel')),
                ('tgc_model', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='scenario.tgcmodel')),
            ],
            options={
                'verbose_name': 'historical Scenario',
                'verbose_name_plural': 'historical Scenarios',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMortalityModel',
            fields=[
                ('model_id', models.BigIntegerField(blank=True, db_index=True)),
                ('name', models.CharField(db_index=True, help_text="Model name (e.g., 'Low Mortality')", max_length=255)),
                ('frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly')], help_text='Rate application frequency', max_length=10)),
                ('rate', models.FloatField(help_text='Mortality rate percentage (e.g., 0.1)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Mortality Model',
                'verbose_name_plural': 'historical Mortality Models',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalFCRModel',
            fields=[
                ('model_id', models.BigIntegerField(blank=True, db_index=True)),
                ('name', models.CharField(db_index=True, help_text="Model name (e.g., 'Standard FCR')", max_length=255)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical FCR Model',
                'verbose_name_plural': 'historical FCR Models',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='TemperatureReading',
            fields=[
                ('reading_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('reading_date', models.DateField(help_text='Date of the temperature reading')),
                ('temperature', models.FloatField(help_text='Temperature value in degrees Celsius (e.g., 12.5)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='readings', to='scenario.temperatureprofile')),
            ],
            options={
                'verbose_name': 'Temperature Reading',
                'verbose_name_plural': 'Temperature Readings',
                'ordering': ['profile', 'reading_date'],
                'unique_together': {('profile', 'reading_date')},
            },
        ),
        migrations.CreateModel(
            name='ScenarioProjection',
            fields=[
                ('projection_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('projection_date', models.DateField(help_text='Projection date')),
                ('day_number', models.IntegerField(help_text='Day offset from start (e.g., 45)', validators=[django.core.validators.MinValueValidator(0)])),
                ('average_weight', models.FloatField(help_text='Fish weight in grams (e.g., 250.5)', validators=[django.core.validators.MinValueValidator(0)])),
                ('population', models.FloatField(help_text='Fish count (e.g., 9950.3)', validators=[django.core.validators.MinValueValidator(0)])),
                ('biomass', models.FloatField(help_text='Biomass in kilograms (e.g., 2491.2)', validators=[django.core.validators.MinValueValidator(0)])),
                ('daily_feed', models.FloatField(help_text='Daily feed in kilograms (e.g., 30.5)', validators=[django.core.validators.MinValueValidator(0)])),
                ('cumulative_feed', models.FloatField(help_text='Total feed in kilograms (e.g., 1200.7)', validators=[django.core.validators.MinValueValidator(0)])),
                ('temperature', models.FloatField(help_text='Temperature in Celsius (e.g., 12.8)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('current_stage', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='scenario_projections', to='batch.lifecyclestage')),
                ('scenario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projections', to='scenario.scenario')),
            ],
            options={
                'verbose_name': 'Scenario Projection',
                'verbose_name_plural': 'Scenario Projections',
                'ordering': ['scenario', 'day_number'],
                'indexes': [models.Index(fields=['scenario', 'projection_date'], name='scenario_sc_scenari_182db9_idx'), models.Index(fields=['scenario', 'day_number'], name='scenario_sc_scenari_8d8b89_idx')],
            },
        ),
        migrations.CreateModel(
            name='FCRModelStage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fcr_value', models.FloatField(help_text='FCR for the stage (e.g., 1.2)', validators=[django.core.validators.MinValueValidator(0)])),
                ('duration_days', models.IntegerField(help_text='Stage duration in days (e.g., 90)', validators=[django.core.validators.MinValueValidator(1)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stages', to='scenario.fcrmodel')),
                ('stage', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='fcr_stages', to='batch.lifecyclestage')),
            ],
            options={
                'verbose_name': 'FCR Model Stage',
                'verbose_name_plural': 'FCR Model Stages',
                'ordering': ['model', 'stage'],
                'unique_together': {('model', 'stage')},
            },
        ),
    ]
