# Generated by Django 4.2.11 on 2025-10-13 17:31
# Database-agnostic version to handle missing tables

from django.db import migrations, connection


def drop_historical_scenario_table(apps, schema_editor):
    """
    Drop HistoricalScenario table if it exists.
    Uses database-agnostic approach for both PostgreSQL and SQLite.
    """
    with connection.cursor() as cursor:
        # Check if table exists
        if connection.vendor == 'postgresql':
            cursor.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = 'scenario_historicalscenario'
                );
            """)
            table_exists = cursor.fetchone()[0]
        elif connection.vendor == 'sqlite':
            cursor.execute("""
                SELECT name FROM sqlite_master 
                WHERE type='table' AND name='scenario_historicalscenario';
            """)
            table_exists = cursor.fetchone() is not None
        else:
            # For other databases, assume table might exist
            table_exists = True
        
        if table_exists:
            # SQLite doesn't support CASCADE, but doesn't need it for this case
            if connection.vendor == 'sqlite':
                cursor.execute("DROP TABLE scenario_historicalscenario;")
            else:
                cursor.execute("DROP TABLE scenario_historicalscenario CASCADE;")


class Migration(migrations.Migration):

    dependencies = [
        ("scenario", "0004_add_history_to_models"),
    ]

    operations = [
        # Drop HistoricalScenario table if it exists (database-agnostic)
        # Note: HistoricalScenarioModelChange was already dropped in migration 0003
        migrations.RunPython(
            drop_historical_scenario_table,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
