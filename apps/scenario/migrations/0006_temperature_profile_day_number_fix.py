# Generated by Django 4.2.11 on 2025-10-14 13:55

from django.db import migrations, models
from django.core.validators import MinValueValidator


def convert_dates_to_day_numbers(apps, schema_editor):
    """Convert existing calendar-date readings to day-number sequence."""
    TemperatureProfile = apps.get_model('scenario', 'TemperatureProfile')
    TemperatureReading = apps.get_model('scenario', 'TemperatureReading')

    for profile in TemperatureProfile.objects.all():
        readings = profile.readings.order_by('reading_date')

        if not readings.exists():
            continue

        start_date = readings.first().reading_date

        # Calculate day numbers from dates and store in new field
        for reading in readings:
            days_offset = (reading.reading_date - start_date).days + 1
            # Store the calculated day number in the new integer field
            reading.day_number = days_offset
            reading.save(update_fields=['day_number'])


class Migration(migrations.Migration):

    dependencies = [
        ("scenario", "0005_remove_scenario_history"),
    ]

    operations = [
        # Add new integer field for day numbers
        migrations.AddField(
            model_name='temperaturereading',
            name='day_number',
            field=models.IntegerField(
                help_text="Relative day number (1-900) in the temperature profile",
                validators=[MinValueValidator(1)],
                null=True  # Allow null initially during migration
            ),
        ),

        # Convert existing data from reading_date to day_number
        migrations.RunPython(convert_dates_to_day_numbers, reverse_code=migrations.RunPython.noop),

        # Drop old unique constraint
        migrations.AlterUniqueTogether(
            name='temperaturereading',
            unique_together=set(),
        ),

        # Make day_number non-nullable
        migrations.AlterField(
            model_name='temperaturereading',
            name='day_number',
            field=models.IntegerField(
                help_text="Relative day number (1-900) in the temperature profile",
                validators=[MinValueValidator(1)]
            ),
        ),

        # Remove the old reading_date field
        migrations.RemoveField(
            model_name='temperaturereading',
            name='reading_date',
        ),

        # Add new unique constraint
        migrations.AlterUniqueTogether(
            name='temperaturereading',
            unique_together={('profile', 'day_number')},
        ),

        # Update ordering
        migrations.AlterModelOptions(
            name='temperaturereading',
            options={'ordering': ['profile', 'day_number']},
        ),
    ]
