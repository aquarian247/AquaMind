# Generated by Django 4.2.11 on 2025-10-13 13:53
# Manually edited to add all historical models

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("scenario", "0003_remove_scenario_history"),
    ]

    operations = [
        # Create HistoricalTemperatureProfile
        migrations.CreateModel(
            name="HistoricalTemperatureProfile",
            fields=[
                ("profile_id", models.BigIntegerField(blank=True, db_index=True)),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="Descriptive name (e.g., 'Faroe Islands Winter')",
                        max_length=255,
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Temperature Profile",
                "verbose_name_plural": "historical Temperature Profiles",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        
        # Create HistoricalTGCModel
        migrations.CreateModel(
            name="HistoricalTGCModel",
            fields=[
                ("model_id", models.BigIntegerField(blank=True, db_index=True)),
                ("name", models.CharField(db_index=True, help_text="Model name (e.g., 'Scotland April TGC')", max_length=255)),
                ("location", models.CharField(help_text="Location (e.g., 'Scotland Site 1')", max_length=255)),
                ("release_period", models.CharField(help_text="Release timing (e.g., 'April')", max_length=255)),
                ("tgc_value", models.FloatField(help_text="TGC coefficient (e.g., 0.025)")),
                ("exponent_n", models.FloatField(help_text="Temperature exponent (e.g., 0.33)")),
                ("exponent_m", models.FloatField(help_text="Weight exponent (e.g., 0.66)")),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
                ("history_user", models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL)),
                ("profile", models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name="+", to="scenario.temperatureprofile")),
            ],
            options={
                "verbose_name": "historical TGC Model",
                "verbose_name_plural": "historical TGC Models",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        
        # Create HistoricalFCRModel
        migrations.CreateModel(
            name="HistoricalFCRModel",
            fields=[
                ("model_id", models.BigIntegerField(blank=True, db_index=True)),
                ("name", models.CharField(db_index=True, help_text="Model name (e.g., 'Standard FCR')", max_length=255)),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
                ("history_user", models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL)),
            ],
            options={
                "verbose_name": "historical FCR Model",
                "verbose_name_plural": "historical FCR Models",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        
        # Create HistoricalMortalityModel
        migrations.CreateModel(
            name="HistoricalMortalityModel",
            fields=[
                ("model_id", models.BigIntegerField(blank=True, db_index=True)),
                ("name", models.CharField(db_index=True, help_text="Model name (e.g., 'Low Mortality')", max_length=255)),
                ("frequency", models.CharField(help_text="Rate application frequency", max_length=10)),
                ("rate", models.FloatField(help_text="Mortality rate percentage (e.g., 0.1)")),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
                ("history_user", models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL)),
            ],
            options={
                "verbose_name": "historical Mortality Model",
                "verbose_name_plural": "historical Mortality Models",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        
        # Create HistoricalBiologicalConstraints
        migrations.CreateModel(
            name="HistoricalBiologicalConstraints",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="Name for this constraint set (e.g., 'Bakkafrost Standard', 'Conservative')",
                        max_length=100,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of this constraint set"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this constraint set is currently active",
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Biological Constraint Set",
                "verbose_name_plural": "historical Biological Constraint Sets",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        
        migrations.AlterField(
            model_name="scenariomodelchange",
            name="change_day",
            field=models.IntegerField(
                help_text="Day of change (e.g., 180). Day 1 is the first simulation day.",
                validators=[django.core.validators.MinValueValidator(1)],
            ),
        ),
    ]
