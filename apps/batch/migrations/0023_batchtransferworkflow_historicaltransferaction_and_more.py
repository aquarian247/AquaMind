# Generated by Django 4.2.11 on 2025-10-18 14:32

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("finance", "0004_bi_delivery_views"),
        ("batch", "0022_add_history_tracking"),
    ]

    operations = [
        migrations.CreateModel(
            name="BatchTransferWorkflow",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "workflow_number",
                    models.CharField(
                        help_text="Unique workflow identifier (e.g., TRF-2024-001)",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "workflow_type",
                    models.CharField(
                        choices=[
                            ("LIFECYCLE_TRANSITION", "Lifecycle Stage Transition"),
                            ("CONTAINER_REDISTRIBUTION", "Container Redistribution"),
                            ("EMERGENCY_CASCADE", "Emergency Cascading Transfer"),
                            ("PARTIAL_HARVEST", "Partial Harvest Preparation"),
                        ],
                        default="LIFECYCLE_TRANSITION",
                        max_length=30,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft - Planning"),
                            ("PLANNED", "Planned - Ready to Execute"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="DRAFT",
                        max_length=20,
                    ),
                ),
                (
                    "planned_start_date",
                    models.DateField(help_text="Planned start date for the workflow"),
                ),
                (
                    "planned_completion_date",
                    models.DateField(
                        blank=True, help_text="Planned completion date", null=True
                    ),
                ),
                (
                    "actual_start_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when first action was executed",
                        null=True,
                    ),
                ),
                (
                    "actual_completion_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when last action was executed",
                        null=True,
                    ),
                ),
                (
                    "total_source_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Total fish in source containers"
                    ),
                ),
                (
                    "total_transferred_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Total fish transferred"
                    ),
                ),
                (
                    "total_mortality_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Total mortalities during transfer"
                    ),
                ),
                (
                    "total_biomass_kg",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total biomass transferred (kg)",
                        max_digits=12,
                    ),
                ),
                (
                    "total_actions_planned",
                    models.PositiveIntegerField(
                        default=0, help_text="Total number of actions planned"
                    ),
                ),
                (
                    "actions_completed",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of actions completed"
                    ),
                ),
                (
                    "completion_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Completion percentage (0-100)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "is_intercompany",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this transfer crosses subsidiary boundaries",
                    ),
                ),
                (
                    "source_subsidiary",
                    models.CharField(
                        blank=True,
                        help_text="Source subsidiary (derived from containers)",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "dest_subsidiary",
                    models.CharField(
                        blank=True,
                        help_text="Destination subsidiary (derived from containers)",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="General notes about the workflow"
                    ),
                ),
                (
                    "cancellation_reason",
                    models.TextField(
                        blank=True, help_text="Reason for cancellation (if cancelled)"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "batch",
                    models.ForeignKey(
                        help_text="Batch being transferred",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="transfer_workflows",
                        to="batch.batch",
                    ),
                ),
                (
                    "completed_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who completed this workflow",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="completed_transfer_workflows",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "dest_lifecycle_stage",
                    models.ForeignKey(
                        blank=True,
                        help_text="Destination lifecycle stage (if stage transition)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="workflows_as_destination",
                        to="batch.lifecyclestage",
                    ),
                ),
                (
                    "finance_transaction",
                    models.ForeignKey(
                        blank=True,
                        help_text="Associated intercompany transaction (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="transfer_workflows",
                        to="finance.intercompanytransaction",
                    ),
                ),
                (
                    "initiated_by",
                    models.ForeignKey(
                        help_text="User who created this workflow",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="initiated_transfer_workflows",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "source_lifecycle_stage",
                    models.ForeignKey(
                        help_text="Source lifecycle stage",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="workflows_as_source",
                        to="batch.lifecyclestage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Batch Transfer Workflow",
                "verbose_name_plural": "Batch Transfer Workflows",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalTransferAction",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "action_number",
                    models.PositiveIntegerField(
                        help_text="Sequence number within workflow (1, 2, 3...)"
                    ),
                ),
                (
                    "source_population_before",
                    models.PositiveIntegerField(
                        help_text="Population in source container before this action"
                    ),
                ),
                (
                    "transferred_count",
                    models.PositiveIntegerField(help_text="Number of fish to transfer"),
                ),
                (
                    "mortality_during_transfer",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of mortalities during transfer"
                    ),
                ),
                (
                    "transferred_biomass_kg",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Biomass transferred (kg)",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending - Not Started"),
                            ("IN_PROGRESS", "In Progress - Being Executed"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed - Rolled Back"),
                            ("SKIPPED", "Skipped"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                (
                    "planned_date",
                    models.DateField(
                        blank=True, help_text="Planned execution date", null=True
                    ),
                ),
                (
                    "actual_execution_date",
                    models.DateField(
                        blank=True, help_text="Actual execution date", null=True
                    ),
                ),
                (
                    "transfer_method",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("NET", "Net Transfer"),
                            ("PUMP", "Pump Transfer"),
                            ("GRAVITY", "Gravity Transfer"),
                            ("MANUAL", "Manual Bucket Transfer"),
                        ],
                        help_text="Method used for transfer",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "water_temp_c",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Water temperature during transfer (°C)",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "oxygen_level",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Oxygen level during transfer (mg/L)",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "execution_duration_minutes",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Duration of transfer in minutes",
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Notes about this specific action"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "dest_assignment",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Destination batch-container assignment (created during execution)",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="batch.batchcontainerassignment",
                    ),
                ),
                (
                    "executed_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="User who executed this action",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "source_assignment",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Source batch-container assignment",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="batch.batchcontainerassignment",
                    ),
                ),
                (
                    "workflow",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Parent workflow this action belongs to",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="batch.batchtransferworkflow",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Transfer Action",
                "verbose_name_plural": "historical Transfer Actions",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalBatchTransferWorkflow",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "workflow_number",
                    models.CharField(
                        db_index=True,
                        help_text="Unique workflow identifier (e.g., TRF-2024-001)",
                        max_length=50,
                    ),
                ),
                (
                    "workflow_type",
                    models.CharField(
                        choices=[
                            ("LIFECYCLE_TRANSITION", "Lifecycle Stage Transition"),
                            ("CONTAINER_REDISTRIBUTION", "Container Redistribution"),
                            ("EMERGENCY_CASCADE", "Emergency Cascading Transfer"),
                            ("PARTIAL_HARVEST", "Partial Harvest Preparation"),
                        ],
                        default="LIFECYCLE_TRANSITION",
                        max_length=30,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft - Planning"),
                            ("PLANNED", "Planned - Ready to Execute"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="DRAFT",
                        max_length=20,
                    ),
                ),
                (
                    "planned_start_date",
                    models.DateField(help_text="Planned start date for the workflow"),
                ),
                (
                    "planned_completion_date",
                    models.DateField(
                        blank=True, help_text="Planned completion date", null=True
                    ),
                ),
                (
                    "actual_start_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when first action was executed",
                        null=True,
                    ),
                ),
                (
                    "actual_completion_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when last action was executed",
                        null=True,
                    ),
                ),
                (
                    "total_source_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Total fish in source containers"
                    ),
                ),
                (
                    "total_transferred_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Total fish transferred"
                    ),
                ),
                (
                    "total_mortality_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Total mortalities during transfer"
                    ),
                ),
                (
                    "total_biomass_kg",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total biomass transferred (kg)",
                        max_digits=12,
                    ),
                ),
                (
                    "total_actions_planned",
                    models.PositiveIntegerField(
                        default=0, help_text="Total number of actions planned"
                    ),
                ),
                (
                    "actions_completed",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of actions completed"
                    ),
                ),
                (
                    "completion_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Completion percentage (0-100)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "is_intercompany",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this transfer crosses subsidiary boundaries",
                    ),
                ),
                (
                    "source_subsidiary",
                    models.CharField(
                        blank=True,
                        help_text="Source subsidiary (derived from containers)",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "dest_subsidiary",
                    models.CharField(
                        blank=True,
                        help_text="Destination subsidiary (derived from containers)",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="General notes about the workflow"
                    ),
                ),
                (
                    "cancellation_reason",
                    models.TextField(
                        blank=True, help_text="Reason for cancellation (if cancelled)"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "batch",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Batch being transferred",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="batch.batch",
                    ),
                ),
                (
                    "completed_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="User who completed this workflow",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "dest_lifecycle_stage",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Destination lifecycle stage (if stage transition)",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="batch.lifecyclestage",
                    ),
                ),
                (
                    "finance_transaction",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Associated intercompany transaction (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="finance.intercompanytransaction",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "initiated_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="User who created this workflow",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "source_lifecycle_stage",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Source lifecycle stage",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="batch.lifecyclestage",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Batch Transfer Workflow",
                "verbose_name_plural": "historical Batch Transfer Workflows",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="TransferAction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action_number",
                    models.PositiveIntegerField(
                        help_text="Sequence number within workflow (1, 2, 3...)"
                    ),
                ),
                (
                    "source_population_before",
                    models.PositiveIntegerField(
                        help_text="Population in source container before this action"
                    ),
                ),
                (
                    "transferred_count",
                    models.PositiveIntegerField(help_text="Number of fish to transfer"),
                ),
                (
                    "mortality_during_transfer",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of mortalities during transfer"
                    ),
                ),
                (
                    "transferred_biomass_kg",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Biomass transferred (kg)",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending - Not Started"),
                            ("IN_PROGRESS", "In Progress - Being Executed"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed - Rolled Back"),
                            ("SKIPPED", "Skipped"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                (
                    "planned_date",
                    models.DateField(
                        blank=True, help_text="Planned execution date", null=True
                    ),
                ),
                (
                    "actual_execution_date",
                    models.DateField(
                        blank=True, help_text="Actual execution date", null=True
                    ),
                ),
                (
                    "transfer_method",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("NET", "Net Transfer"),
                            ("PUMP", "Pump Transfer"),
                            ("GRAVITY", "Gravity Transfer"),
                            ("MANUAL", "Manual Bucket Transfer"),
                        ],
                        help_text="Method used for transfer",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "water_temp_c",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Water temperature during transfer (°C)",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "oxygen_level",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Oxygen level during transfer (mg/L)",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "execution_duration_minutes",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Duration of transfer in minutes",
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Notes about this specific action"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "dest_assignment",
                    models.ForeignKey(
                        blank=True,
                        help_text="Destination batch-container assignment (created during execution)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="transfer_actions_as_dest",
                        to="batch.batchcontainerassignment",
                    ),
                ),
                (
                    "executed_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who executed this action",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="executed_transfer_actions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "source_assignment",
                    models.ForeignKey(
                        help_text="Source batch-container assignment",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="transfer_actions_as_source",
                        to="batch.batchcontainerassignment",
                    ),
                ),
                (
                    "workflow",
                    models.ForeignKey(
                        help_text="Parent workflow this action belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="actions",
                        to="batch.batchtransferworkflow",
                    ),
                ),
            ],
            options={
                "verbose_name": "Transfer Action",
                "verbose_name_plural": "Transfer Actions",
                "ordering": ["workflow", "action_number"],
                "indexes": [
                    models.Index(
                        fields=["workflow", "status"],
                        name="batch_trans_workflo_34b086_idx",
                    ),
                    models.Index(
                        fields=["actual_execution_date"],
                        name="batch_trans_actual__96ce99_idx",
                    ),
                    models.Index(
                        fields=["status"], name="batch_trans_status_d4e717_idx"
                    ),
                ],
                "unique_together": {("workflow", "action_number")},
            },
        ),
        migrations.AddIndex(
            model_name="batchtransferworkflow",
            index=models.Index(
                fields=["batch", "status"], name="batch_batch_batch_i_01b738_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="batchtransferworkflow",
            index=models.Index(
                fields=["planned_start_date"], name="batch_batch_planned_bc83d0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="batchtransferworkflow",
            index=models.Index(
                fields=["workflow_type"], name="batch_batch_workflo_faef0d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="batchtransferworkflow",
            index=models.Index(fields=["status"], name="batch_batch_status_97e7a3_idx"),
        ),
    ]
