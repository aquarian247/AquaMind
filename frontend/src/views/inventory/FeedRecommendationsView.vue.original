<template>
  <div class="feed-recommendations">
    <div class="header-actions">
      <h2>Feed Recommendations</h2>
      <div class="actions">
        <button 
          class="btn primary" 
          @click="generateRecommendations"
          :disabled="isGenerating"
        >
          {{ isGenerating ? 'Generating...' : 'Generate Recommendations' }}
        </button>
        <button 
          class="btn secondary" 
          @click="refreshRecommendations"
          :disabled="isLoading"
        >
          {{ isLoading ? 'Loading...' : 'Refresh' }}
        </button>
      </div>
    </div>

    <div class="filters">
      <div class="filter-group">
        <label for="dateFilter">Date</label>
        <input 
          type="date" 
          id="dateFilter" 
          v-model="filterDate" 
          @change="loadRecommendations"
        >
      </div>
      <div class="filter-group">
        <label for="containerFilter">Container</label>
        <select 
          id="containerFilter" 
          v-model="filteredContainerId" 
          @change="loadRecommendations"
        >
          <option value="">All Containers</option>
          <option 
            v-for="container in containers" 
            :key="container.id" 
            :value="container.id"
          >
            {{ container.name }}
          </option>
        </select>
      </div>
      <div class="filter-group">
        <label for="batchFilter">Batch</label>
        <select 
          id="batchFilter" 
          v-model="filteredBatchId" 
          @change="loadRecommendations"
        >
          <option value="">All Batches</option>
          <option 
            v-for="batch in batches" 
            :key="batch.id" 
            :value="batch.id"
          >
            {{ batch.name }}
          </option>
        </select>
      </div>
      <div class="filter-group">
        <label for="statusFilter">Status</label>
        <select 
          id="statusFilter" 
          v-model="filteredStatus"
          @change="loadRecommendations"
        >
          <option value="">All</option>
          <option value="followed">Followed</option>
          <option value="not_followed">Not Followed</option>
        </select>
      </div>
    </div>

    <div class="alert warning" v-if="suboptimalContainers.length > 0">
      <strong>Warning:</strong> {{ suboptimalContainers.length }} containers have suboptimal environmental conditions for feeding.
      <a href="#" @click.prevent="showSuboptimalDetails = !showSuboptimalDetails">
        {{ showSuboptimalDetails ? 'Hide Details' : 'Show Details' }}
      </a>
      <ul v-if="showSuboptimalDetails">
        <li v-for="(container, index) in suboptimalContainers" :key="index">
          <strong>{{ container.name }}</strong>: {{ container.issue }}
        </li>
      </ul>
    </div>

    <div class="recommendations-container" v-if="!isLoading">
      <div v-if="recommendations.length === 0" class="no-data">
        <p>No feed recommendations found for the selected filters.</p>
        <p v-if="!filterDate">Try selecting a date or generating new recommendations.</p>
      </div>

      <div v-else class="recommendations-grid">
        <div v-for="recommendation in recommendations" :key="recommendation.id" class="recommendation-card">
          <div class="card-header">
            <div class="container-name">{{ recommendation.container_name }}</div>
            <div class="date">{{ formatDate(recommendation.recommended_date) }}</div>
          </div>
          <div class="card-content">
            <div class="feed-info">
              <h4>{{ recommendation.feed_name }}</h4>
              <div class="recommendation-value">{{ recommendation.recommended_feed_kg }} kg</div>
              <div class="feeding-percentage">{{ recommendation.feeding_percentage }}% of biomass</div>
            </div>
            <div class="batch-info">
              <div class="batch-name">Batch: {{ recommendation.batch_name }}</div>
              <div class="lifecycle-stage">Stage: {{ recommendation.lifecycle_stage }}</div>
              <div class="biomass">Biomass: {{ recommendation.biomass_kg }} kg</div>
            </div>
            <div class="environmental-data">
              <div class="temp" v-if="recommendation.water_temperature_c">
                Water Temp: {{ recommendation.water_temperature_c }}°C
              </div>
              <div class="oxygen" v-if="recommendation.dissolved_oxygen_mg_l">
                Dissolved O₂: {{ recommendation.dissolved_oxygen_mg_l }} mg/L
              </div>
              <div class="expected-fcr" v-if="recommendation.expected_fcr">
                Expected FCR: {{ recommendation.expected_fcr }}
              </div>
            </div>
          </div>
          <div class="card-footer">
            <div class="status" :class="recommendation.is_followed ? 'followed' : 'not-followed'">
              {{ recommendation.is_followed ? 'Followed' : 'Not followed' }}
            </div>
            <button 
              v-if="!recommendation.is_followed" 
              class="btn small" 
              @click="markAsFollowed(recommendation.id)"
            >
              Mark as Followed
            </button>
          </div>
          <div class="recommendation-reason">
            <strong>Recommendation basis:</strong> {{ recommendation.recommendation_reason }}
          </div>
        </div>
      </div>
    </div>

    <div class="loading-indicator" v-if="isLoading">
      <div class="spinner"></div>
      <p>Loading recommendations...</p>
    </div>

    <div class="dialog-overlay" v-if="showGenerateDialog">
      <div class="dialog">
        <div class="dialog-header">
          <h3>Generate Recommendations</h3>
          <button class="close-btn" @click="showGenerateDialog = false">×</button>
        </div>
        <div class="dialog-content">
          <div class="form-group">
            <label for="generationDate">Date</label>
            <input 
              type="date" 
              id="generationDate" 
              v-model="generationDate"
              :min="today"
            >
          </div>
          <div class="form-group">
            <label for="generationTarget">Target</label>
            <select id="generationTarget" v-model="generationTarget">
              <option value="all">All Containers</option>
              <option value="container">Specific Container</option>
              <option value="batch">Specific Batch</option>
            </select>
          </div>
          <div class="form-group" v-if="generationTarget === 'container'">
            <label for="generationContainer">Container</label>
            <select id="generationContainer" v-model="generationContainerId">
              <option value="">Select Container</option>
              <option 
                v-for="container in enabledContainers" 
                :key="container.id" 
                :value="container.id"
              >
                {{ container.name }}
              </option>
            </select>
          </div>
          <div class="form-group" v-if="generationTarget === 'batch'">
            <label for="generationBatch">Batch</label>
            <select id="generationBatch" v-model="generationBatchId">
              <option value="">Select Batch</option>
              <option 
                v-for="batch in batches" 
                :key="batch.id" 
                :value="batch.id"
              >
                {{ batch.name }}
              </option>
            </select>
          </div>
        </div>
        <div class="dialog-footer">
          <button class="btn" @click="showGenerateDialog = false">Cancel</button>
          <button 
            class="btn primary" 
            @click="confirmGenerateRecommendations"
            :disabled="!isGenerationFormValid"
          >
            Generate
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { ref, computed, onMounted } from 'vue'
import { useApi } from '@/composables/useApi'
import { createAuthenticatedAxios, getAuthToken, applyTokenGlobally } from '@/utils/api-auth'

export default {
  name: 'FeedRecommendationsView',
  inject: ['toast'], // Optional: used if you have a toast notification system
  setup() {
    // Get the API utility that handles authentication automatically
    const api = useApi()
    
    // Create a dedicated axios instance for inventory endpoints
    // to ensure consistent authentication
    const inventoryAxios = createAuthenticatedAxios()
    // State
    const recommendations = ref([])
    const containers = ref([])
    const enabledContainers = ref([])
    const batches = ref([])
    const isLoading = ref(true)
    const isGenerating = ref(false)
    const filterDate = ref(new Date().toISOString().substr(0, 10)) // Today's date
    const filteredContainerId = ref('')
    const filteredBatchId = ref('')
    const filteredStatus = ref('')
    const showGenerateDialog = ref(false)
    const generationDate = ref(new Date().toISOString().substr(0, 10))
    const generationTarget = ref('all')
    const generationContainerId = ref('')
    const generationBatchId = ref('')
    const suboptimalContainers = ref([])
    const showSuboptimalDetails = ref(false)

    // Computed
    const today = computed(() => {
      return new Date().toISOString().substr(0, 10)
    })

    const isGenerationFormValid = computed(() => {
      if (!generationDate.value) return false
      
      if (generationTarget.value === 'container' && !generationContainerId.value) {
        return false
      }
      
      if (generationTarget.value === 'batch' && !generationBatchId.value) {
        return false
      }
      
      return true
    })

    // Methods
    const formatDate = (dateString) => {
      const options = { year: 'numeric', month: 'short', day: 'numeric' }
      return new Date(dateString).toLocaleDateString(undefined, options)
    }
    
    // Helper to log token status - using our utility function instead
    const logTokenStatus = () => {
      const token = getAuthToken()
      if (token) {
        console.log(`Auth token is present: ${token.substring(0, 6)}...${token.substring(token.length - 6)}`)
        return true
      } else {
        console.warn('No auth token found in localStorage')
        return false
      }
    }

    const loadRecommendations = async () => {
      isLoading.value = true
      try {
        // Ensure token is applied globally
        applyTokenGlobally()
        
        // Get the current token for logging
        const token = getAuthToken()
        if (!token) {
          console.error('Cannot load recommendations: No authentication token')
          recommendations.value = []
          isLoading.value = false
          return
        }
        
        // Prepare query parameters
        const params = {}
        
        if (filterDate.value) {
          params.recommended_date = filterDate.value
        } else {
          // If no date is selected, use today's date
          const today = new Date().toISOString().split('T')[0]
          params.recommended_date = today
          filterDate.value = today
        }
        
        if (filteredContainerId.value) {
          params.container_id = filteredContainerId.value
        }
        
        if (filteredBatchId.value) {
          params.batch_id = filteredBatchId.value
        }
        
        if (filteredStatus.value) {
          params.status = filteredStatus.value
        }
        
        console.log('Loading recommendations with params:', params)
        
        // Make a request using our dedicated inventory axios instance
        try {
          console.log('Attempting request with dedicated inventory axios instance')
          const response = await inventoryAxios.get('inventory/feed-recommendations', { params })
          
          console.log('Inventory axios successful:', response.status)
          // Handle paginated response - check if results property exists
          if (response.data && Array.isArray(response.data.results)) {
            recommendations.value = response.data.results
            console.log(`Received ${recommendations.value.length} recommendations (paginated response)`)
          } else if (Array.isArray(response.data)) {
            recommendations.value = response.data
            console.log(`Received ${recommendations.value.length} recommendations (direct array)`)
          } else {
            console.error('Unexpected response format:', response.data)
            recommendations.value = []
          }
          
          // Check if recommendations array is empty or not an array
          if (!Array.isArray(recommendations.value)) {
            console.error('Recommendations is not an array:', recommendations.value)
            toastMessage.value = 'Error loading recommendations. Please check the console for details.'
            showToast.value = true
            return
          }
          
          if (recommendations.value.length === 0) {
            console.log('No feed recommendations found for the selected date')
            toastMessage.value = 'No feed recommendations found for the selected date.'
            showToast.value = true
            return
          }
          
          // Check for suboptimal conditions
          checkForSuboptimalConditions()
          return
        } catch (axiosError) {
          console.error('Inventory axios request failed:', axiosError.message)
          if (axiosError.response) {
            console.error('Response status:', axiosError.response.status)
            console.error('Response data:', axiosError.response.data)
          }
        }
        
        // If direct call fails, fall back to the api utility
        console.log('Falling back to api utility')
        const response = await api.get('inventory/feed-recommendations/', params)
        recommendations.value = response
        
        // Check if recommendations array is empty or not an array
        if (!Array.isArray(recommendations.value)) {
          console.error('Recommendations is not an array:', recommendations.value)
          toastMessage.value = 'Error loading recommendations. Please check the console for details.'
          showToast.value = true
          return
        }
        
        if (recommendations.value.length === 0) {
          console.log('No feed recommendations found for the selected date')
          toastMessage.value = 'No feed recommendations found for the selected date.'
          showToast.value = true
          return
        }
        
        // Check for suboptimal conditions
        checkForSuboptimalConditions()
      } catch (error) {
        handleApiError(error, 'recommendations')
        recommendations.value = []
      } finally {
        isLoading.value = false
      }
    }

    const handleApiError = (error, source = 'API') => {
      console.error(`Error loading ${source}:`, error)
      
      // Log detailed error information
      if (error.response) {
        // The request was made and the server responded with a status code
        // that falls out of the range of 2xx
        console.error(`${source} server responded with error:`, error.response.status)
        console.error('Error data:', error.response.data)
        console.error('Error headers:', error.response.headers)
        
        // Special handling for 401 unauthorized errors
        if (error.response.status === 401) {
          console.error(`Authentication error detected for ${source}. Token may be invalid or expired.`)
          toastMessage.value = 'Authentication error. Please refresh your token or log in again.'
          showToast.value = true
          return
        }
      } else if (error.request) {
        // The request was made but no response was received
        console.error(`${source} request was made but no response was received:`, error.request)
      } else {
        // Something happened in setting up the request that triggered an Error
        console.error(`Error setting up ${source} request:`, error.message)
      }
      
      // Additional logging for TypeError (e.g., .filter is not a function)
      if (error instanceof TypeError) {
        console.error(`${source} error details:`, error.message)
      }
      
      // Set user-friendly error message
      toastMessage.value = `Failed to load ${source.toLowerCase()}. Please try again later.`
      showToast.value = true
    }

    const refreshRecommendations = () => {
      loadRecommendations()
    }

    const loadContainers = async () => {
      try {
        // Get all containers first to check token auth is working
        console.log('Fetching containers...')
        // Ensure token is applied globally
        applyTokenGlobally()
        
        // Get the current token for logging
        const token = getAuthToken()
        if (!token) {
          console.error('Cannot load containers: No authentication token')
          containers.value = []
          enabledContainers.value = []
          return
        }
        
        // Use our specialized axios instance for infrastructure
        try {
          console.log('Attempting request with dedicated axios instance for containers')
          const response = await inventoryAxios.get('infrastructure/containers')
          
          console.log('Containers request successful:', response.status)
          
          // Handle paginated response - check if results property exists
          if (response.data && Array.isArray(response.data.results)) {
            containers.value = response.data.results
            console.log(`Received ${containers.value.length} containers (paginated response)`)
          } else if (Array.isArray(response.data)) {
            containers.value = response.data
            console.log(`Received ${containers.value.length} containers (direct array)`)
          } else {
            console.error('Unexpected containers response format:', response.data)
            containers.value = []
          }
          
          // Only proceed if containers is an array
          if (Array.isArray(containers.value)) {
            enabledContainers.value = containers.value.filter(container => container.feed_recommendations_enabled)
            console.log('Enabled containers:', enabledContainers.value.length)
          } else {
            console.error('Container data is not an array:', containers.value)
            enabledContainers.value = []
          }
          return
        } catch (axiosError) {
          console.error('Containers request failed:', axiosError.message)
          if (axiosError.response) {
            console.error('Response status:', axiosError.response.status)
            console.error('Response data:', axiosError.response.data)
          }
        }
        
        // Fall back to api utility
        console.log('Falling back to api utility for containers')
        const containersData = await api.get('infrastructure/containers/')
        console.log('Loaded containers:', containersData)
        
        containers.value = containersData
        enabledContainers.value = containers.value.filter(container => container.feed_recommendations_enabled)
        console.log('Enabled containers:', enabledContainers.value.length)
      } catch (error) {
        console.error('Error loading containers:', error)
        if (error.response) {
          console.error('Container response status:', error.response.status)
          console.error('Container response data:', error.response.data)
          console.error('Container response headers:', error.response.headers)
        } else if (error.request) {
          console.error('No container response received:', error.request)
        } else {
          console.error('Container error details:', error.message)
        }
        containers.value = []
        enabledContainers.value = []
      }
    }

    const loadBatches = async () => {
      try {
        // Use the api utility that includes authentication tokens
        const batchesData = await api.get('batch/batches/')
        console.log('Loaded batches:', batchesData)
        batches.value = batchesData
      } catch (error) {
        console.error('Error loading batches:', error)
        batches.value = []
      }
    }

    const generateRecommendations = () => {
      showGenerateDialog.value = true
    }

    const confirmGenerateRecommendations = async () => {
      if (!isGenerationFormValid.value) return
      
      isGenerating.value = true
      showGenerateDialog.value = false // Close the dialog immediately
      
      try {
        // Ensure token is applied globally
        applyTokenGlobally()
        
        // Get the current token for logging
        const token = getAuthToken()
        if (!token) {
          console.error('Cannot generate recommendations: No authentication token')
          toastMessage.value = 'Authentication token missing. Please refresh the token.';
          showToast.value = true;
          isGenerating.value = false;
          return;
        }
        
        // Prepare the request data
        const requestData = {
          date: generationDate.value
        }
        
        if (generationTarget.value === 'container') {
          requestData.container_id = generationContainerId.value
        } else if (generationTarget.value === 'batch') {
          requestData.batch_id = generationBatchId.value
        }
        
        console.log('Generating recommendations with data:', requestData)
        
        // Use the dedicated axios instance for the inventory endpoints
        const response = await inventoryAxios.post('inventory/feed-recommendations/generate', requestData)
        
        console.log('Recommendations generated, response:', response)
        
        // Handle the response based on the data format
        if (response.data) {
          // Check if we received paginated results or a direct array
          if (Array.isArray(response.data)) {
            recommendations.value = response.data
            console.log(`Generated ${recommendations.value.length} recommendations (direct array)`)
          } else if (Array.isArray(response.data.results)) {
            recommendations.value = response.data.results
            console.log(`Generated ${recommendations.value.length} recommendations (paginated)`)
          } else {
            console.warn('Unexpected response format from generate endpoint:', response.data)
            // Try to handle it anyway
            recommendations.value = Array.isArray(response.data) ? response.data : []
          }
          
          // Show success message
          toastMessage.value = `Successfully generated ${recommendations.value.length} feed recommendations`
          showToast.value = true
        }
        
        // Reset filter to new date and reload
        filterDate.value = generationDate.value
        await loadRecommendations()
        
        // Reset form
        generationDate.value = new Date().toISOString().substr(0, 10)
        generationTarget.value = 'all'
        generationContainerId.value = ''
        generationBatchId.value = ''
      } catch (error) {
        handleApiError(error, 'recommendation generation')
        console.error('Error details for recommendation generation:', error)
      } finally {
        isGenerating.value = false
      }
    }

    const markAsFollowed = async (recommendationId) => {
      try {
        // Update the recommendation status using the api utility
        await api.patch(`inventory/feed-recommendations/${recommendationId}/`, {
          is_followed: true
        })
        
        // Update the local state
        const index = recommendations.value.findIndex(r => r.id === recommendationId)
        if (index !== -1) {
          recommendations.value[index].is_followed = true
        }
      } catch (error) {
        console.error('Error marking recommendation as followed:', error)
        alert('Error updating status. Please try again.')
      }
    }

    const checkForSuboptimalConditions = () => {
      suboptimalContainers.value = []
      
      // Check each recommendation for suboptimal conditions
      recommendations.value.forEach(rec => {
        const issues = []
        
        // Temperature check
        if (rec.water_temperature_c) {
          if (rec.water_temperature_c < 8) {
            issues.push(`Low temperature (${rec.water_temperature_c}°C)`)
          } else if (rec.water_temperature_c > 18) {
            issues.push(`High temperature (${rec.water_temperature_c}°C)`)
          }
        }
        
        // Oxygen check
        if (rec.dissolved_oxygen_mg_l) {
          if (rec.dissolved_oxygen_mg_l < 6) {
            issues.push(`Low dissolved oxygen (${rec.dissolved_oxygen_mg_l} mg/L)`)
          }
        }
        
        if (issues.length > 0) {
          suboptimalContainers.value.push({
            name: rec.container_name,
            issue: issues.join(', ')
          })
        }
      })
    }

    // Lifecycle hooks
    onMounted(async () => {
      // Ensure the token is applied globally to all axios instances
      try {
        // Apply token to all axios instances for consistency
        applyTokenGlobally()
        console.log('Applied authentication token globally on component mount')
      } catch (error) {
        console.error('Error setting global authentication:', error)
      }
      
      // Initial data load with sequential await to better track errors
      try {
        // Log token status before making requests
        logTokenStatus()
        
        console.log('⏳ Loading containers...')
        await loadContainers()
        console.log('✅ Containers loaded')
        
        console.log('⏳ Loading batches...')
        await loadBatches()
        console.log('✅ Batches loaded')
        
        console.log('⏳ Loading recommendations...')
        await loadRecommendations()
        console.log('✅ Recommendations loaded')
      } catch (error) {
        console.error('❌ Error during initial data load:', error)
      }
    })

    return {
      recommendations,
      containers,
      enabledContainers,
      batches,
      isLoading,
      isGenerating,
      filterDate,
      filteredContainerId,
      filteredBatchId,
      filteredStatus,
      showGenerateDialog,
      generationDate,
      generationTarget,
      generationContainerId,
      generationBatchId,
      suboptimalContainers,
      showSuboptimalDetails,
      today,
      isGenerationFormValid,
      formatDate,
      loadRecommendations,
      refreshRecommendations,
      generateRecommendations,
      confirmGenerateRecommendations,
      markAsFollowed
    }
  }
}
</script>

<style scoped>
.feed-recommendations {
  position: relative;
}

.header-actions {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.actions {
  display: flex;
  gap: 10px;
}

.filters {
  display: flex;
  gap: 20px;
  margin-bottom: 20px;
  flex-wrap: wrap;
}

.filter-group {
  display: flex;
  flex-direction: column;
  min-width: 150px;
}

.filter-group label {
  margin-bottom: 5px;
  font-weight: 500;
}

.filter-group select,
.filter-group input {
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.recommendations-container {
  margin-top: 20px;
}

.no-data {
  text-align: center;
  padding: 40px;
  background-color: #f9f9f9;
  border-radius: 4px;
}

.recommendations-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: 20px;
}

.recommendation-card {
  border: 1px solid #ddd;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 4px rgba(0,0,0,0.05);
  background: white;
  transition: transform 0.2s, box-shadow 0.2s;
}

.recommendation-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.card-header {
  background-color: #0056b3;
  color: white;
  padding: 10px 15px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.container-name {
  font-weight: bold;
  font-size: 1.1em;
}

.card-content {
  padding: 15px;
}

.feed-info {
  margin-bottom: 15px;
  padding-bottom: 15px;
  border-bottom: 1px solid #eee;
}

.feed-info h4 {
  margin: 0 0 5px 0;
  color: #333;
}

.recommendation-value {
  font-size: 1.6em;
  font-weight: bold;
  color: #1a8754;
  margin-bottom: 5px;
}

.feeding-percentage {
  color: #6c757d;
}

.batch-info, .environmental-data {
  margin-bottom: 15px;
  font-size: 0.95em;
}

.batch-info div, .environmental-data div {
  margin-bottom: 5px;
}

.card-footer {
  padding: 10px 15px;
  background-color: #f8f9fa;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.status {
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 0.85em;
  font-weight: 500;
}

.status.followed {
  background-color: #d4edda;
  color: #155724;
}

.status.not-followed {
  background-color: #f8f9fa;
  color: #6c757d;
}

.recommendation-reason {
  padding: 10px 15px;
  font-size: 0.9em;
  background-color: #f8f9fa;
  border-top: 1px solid #eee;
}

.loading-indicator {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 40px;
}

.spinner {
  border: 4px solid #f3f3f3;
  border-top: 4px solid #0056b3;
  border-radius: 50%;
  width: 30px;
  height: 30px;
  animation: spin 1s linear infinite;
  margin-bottom: 10px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.btn {
  padding: 8px 16px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 500;
  transition: background-color 0.2s;
}

.btn.primary {
  background-color: #0056b3;
  color: white;
}

.btn.secondary {
  background-color: #f8f9fa;
  border: 1px solid #ddd;
}

.btn.small {
  padding: 4px 8px;
  font-size: 0.85em;
}

.btn:hover {
  opacity: 0.9;
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.dialog-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0,0,0,0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.dialog {
  background-color: white;
  border-radius: 8px;
  width: 450px;
  max-width: 90%;
  box-shadow: 0 4px 20px rgba(0,0,0,0.15);
}

.dialog-header {
  padding: 15px 20px;
  border-bottom: 1px solid #eee;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.dialog-header h3 {
  margin: 0;
}

.close-btn {
  background: none;
  border: none;
  font-size: 1.5em;
  cursor: pointer;
  color: #555;
}

.dialog-content {
  padding: 20px;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: 500;
}

.form-group input,
.form-group select {
  width: 100%;
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.dialog-footer {
  padding: 15px 20px;
  border-top: 1px solid #eee;
  display: flex;
  justify-content: flex-end;
  gap: 10px;
}

.alert {
  padding: 12px 15px;
  border-radius: 4px;
  margin-bottom: 20px;
}

.alert.warning {
  background-color: #fff3cd;
  border: 1px solid #ffecb5;
  color: #856404;
}

.alert a {
  color: inherit;
  font-weight: bold;
  margin-left: 10px;
}

.alert ul {
  margin-top: 10px;
  margin-bottom: 0;
}
</style>
