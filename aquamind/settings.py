"""
Django settings for aquamind project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-m6+q(yw*=akv((3vbx3$=6zh&41+s(q&58aa#g5#^ok6-5+86^"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0']


# Application definition

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'corsheaders',
    # OpenAPI 3.1 schema generation (migration target)
    'drf_spectacular',
    'drf_yasg',
    'simple_history',
]

LOCAL_APPS = [
    'apps.users',
    'apps.infrastructure',
    'apps.environmental',
    'apps.batch',
    'apps.inventory',
    'apps.health',
    # 'apps.core',  # Temporarily disabled
    'apps.broodstock',
    'apps.scenario',
    'apps.operational',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "simple_history.middleware.HistoryRequestMiddleware",
]



# CORS settings
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS']

# CSRF settings
# Django doesn't support wildcards in CSRF_TRUSTED_ORIGINS, so we need to add specific origins
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'https://localhost:8000',
    'https://127.0.0.1:8000',
    'http://127.0.0.1:54341', # Previous proxy port
    'http://127.0.0.1:52734', # Previous proxy port
    'http://127.0.0.1:50186', # Previous proxy port
    'http://127.0.0.1:60263', # From the second declaration
    'http://127.0.0.1:49799', # Current browser_preview proxy port
]

ROOT_URLCONF = "aquamind.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "aquamind.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# PostgreSQL configuration
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'aquamind_db',
        'USER': 'postgres',
        'PASSWORD': 'adminpass1234',  # Updated with the correct password
        'HOST': 'localhost',  # Changed from 'timescale-db' to 'localhost'
        'PORT': '5432',
        'OPTIONS': {
            'options': '-c search_path=public -c client_encoding=utf8'
        }
    }
}

# SQLite configuration (commented out)
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Test runner configuration
# TEST_RUNNER = 'apps.core.test_runner.TimescaleDBTestRunner'  # Temporarily disabled

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]



# CSRF Protection
# CSRF_TRUSTED_ORIGINS is defined earlier in this file.

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    # Use custom paginator that validates page numbers (page >= 1) and returns
    # 400 on invalid values while gracefully handling out-of-range pages.
    'DEFAULT_PAGINATION_CLASS': 'aquamind.utils.pagination.ValidatedPageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    # Use drf-spectacular for OpenAPI 3.1 generation
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# JWT settings
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,  # Changed to False since blacklist app is not installed
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
}

# TimescaleDB specific settings
TIMESCALE_ENABLED = True

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True if DEBUG else False
CORS_ALLOWED_ORIGINS = [
    'http://localhost:8080',
    'http://127.0.0.1:8080',
    'http://127.0.0.1:36307',
    'http://localhost:5173',
    'http://127.0.0.1:5173',
    'http://localhost:5174',
    'http://127.0.0.1:5174',
]

# Swagger settings
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    }
}

# drf-spectacular settings (single source of truth for AquaMind API)
SPECTACULAR_SETTINGS = {
    "TITLE": "AquaMind API",
    "DESCRIPTION": "Unified OpenAPI 3.1 specification for the AquaMind backend.",
    "VERSION": "v1",
    # Do not serve the schema by default; a dedicated URL is configured in urls.py
    "SERVE_INCLUDE_SCHEMA": False,
    # Apply tokenAuth (DRF TokenAuthentication) as a global requirement so that
    # every operation in the generated OpenAPI spec explicitly requires
    # authentication.  This ensures contract-test tools like Schemathesis send
    # the correct header by default and highlights any endpoint that is
    # intentionally anonymous (which would need an explicit override).
    #
    # The ``tokenAuth`` scheme is automatically defined by drf-spectacular from
    # the presence of ``TokenAuthentication`` in DEFAULT_AUTHENTICATION_CLASSES.
    "SECURITY": [{"tokenAuth": []}],
}

# Using Django's default User model with extended profiles

# Media files settings for user profile pictures
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Broodstock defaults
BROODSTOCK_DEFAULTS = {
    'AVG_FISH_WEIGHT_KG': 10.0,
}
