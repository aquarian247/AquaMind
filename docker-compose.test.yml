version: '3.8'

services:
  # ========================================
  # BACKEND SERVICE - TEST ENVIRONMENT
  # ========================================
  web:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: aquamind-backend-test
    restart: unless-stopped
    volumes:
      - .:/workspaces/AquaMind
      - staticfiles:/workspaces/AquaMind/staticfiles
      - media:/workspaces/AquaMind/media
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      - timescale-db
      - redis
    environment:
      # Django Configuration
      - DJANGO_SETTINGS_MODULE=aquamind.settings_test
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-false}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}

      # Database Configuration
      - DB_ENGINE=${DB_ENGINE:-django.db.backends.postgresql}
      - DB_NAME=${DB_NAME:-aquamind_test_db}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=timescale-db
      - DB_PORT=5432
      - TIMESCALE_ENABLED=${TIMESCALE_ENABLED:-true}

      # CORS Configuration
      - CORS_ALLOW_ALL_ORIGINS=${CORS_ALLOW_ALL_ORIGINS:-false}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}

      # Email Configuration
      - EMAIL_BACKEND=${EMAIL_BACKEND:-django.core.mail.backends.console.EmailBackend}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT:-587}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS:-true}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL:-test@aquamind.local}

      # Logging Configuration
      - LOG_FILE=/var/log/aquamind/test.log
      - SECURITY_LOG_FILE=/var/log/aquamind/test-security.log

      # Cache Configuration
      - REDIS_URL=redis://redis:6379/1

      # Environment Identification
      - ENVIRONMENT=test
      - DEPLOYMENT_ENV=test
      - BAKKAFROST_SUBSIDIARY=${BAKKAFROST_SUBSIDIARY:-TEST}
      - BAKKAFROST_REGION=${BAKKAFROST_REGION:-SCOTLAND}
      - TEST_ENV_ID=${TEST_ENV_ID:-BAKKAFROST_TEST_001}

      # Health Checks
      - HEALTH_CHECKS_ENABLED=true

      # Python Environment
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1

    networks:
      - aquamind-test-net

    # Health Check
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  # ========================================
  # DATABASE SERVICE - TEST ENVIRONMENT
  # ========================================
  timescale-db:
    image: timescale/timescaledb:latest-pg14
    container_name: aquamind-db-test
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-aquamind_test_db}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data_test:/var/lib/postgresql/data
      - ./scripts/database:/docker-entrypoint-initdb.d
      - postgres_logs_test:/var/log/postgresql
    ports:
      - "${DB_EXTERNAL_PORT:-5433}:5432"
    networks:
      - aquamind-test-net

    # Health Check
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 30s
      timeout: 10s
      retries: 3

    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # ========================================
  # REDIS CACHE SERVICE - TEST ENVIRONMENT
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: aquamind-redis-test
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_test:/data
    ports:
      - "${REDIS_EXTERNAL_PORT:-6380}:6379"
    networks:
      - aquamind-test-net

    # Health Check
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # ========================================
  # NGINX REVERSE PROXY - TEST ENVIRONMENT
  # ========================================
  nginx:
    image: nginx:alpine
    container_name: aquamind-nginx-test
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.test.conf:/etc/nginx/nginx.conf:ro
      - staticfiles:/var/www/static:ro
      - media:/var/www/media:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs_test:/var/log/nginx
    depends_on:
      - web
    networks:
      - aquamind-test-net

    # Health Check
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # ========================================
  # MONITORING SERVICE (OPTIONAL) - TEST ENVIRONMENT
  # ========================================
  monitoring:
    image: prom/prometheus:latest
    container_name: aquamind-monitoring-test
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_test:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - aquamind-test-net

    # Logging Configuration
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

# ========================================
# NETWORKS
# ========================================
networks:
  aquamind-test-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ========================================
# VOLUMES
# ========================================
volumes:
  postgres_data_test:
    driver: local
  redis_data_test:
    driver: local
  prometheus_data_test:
    driver: local
  staticfiles:
    driver: local
  media:
    driver: local
  nginx_logs_test:
    driver: local
  postgres_logs_test:
    driver: local

# ========================================
# CONFIGURATION NOTES
# ========================================
#
# Required Environment Variables:
# - DJANGO_SECRET_KEY: Django secret key
# - DB_USER: Database username
# - DB_PASSWORD: Database password
# - ALLOWED_HOSTS: Comma-separated list of allowed hosts
# - CORS_ALLOWED_ORIGINS: Comma-separated list of allowed CORS origins
# - CSRF_TRUSTED_ORIGINS: Comma-separated list of trusted CSRF origins
#
# Optional Environment Variables:
# - BACKEND_PORT: Backend service port (default: 8000)
# - DB_EXTERNAL_PORT: External database port (default: 5433)
# - REDIS_EXTERNAL_PORT: External Redis port (default: 6380)
# - NGINX_HTTP_PORT: Nginx HTTP port (default: 80)
# - NGINX_HTTPS_PORT: Nginx HTTPS port (default: 443)
# - PROMETHEUS_PORT: Prometheus port (default: 9090)
#
# Usage:
# docker-compose -f docker-compose.test.yml up -d
# docker-compose -f docker-compose.test.yml logs -f web
# docker-compose -f docker-compose.test.yml down
